<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GAMES101个人笔记-基础引入</title>
      <link href="/posts/40876.html"/>
      <url>/posts/40876.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h1><p><img src="/posts/40876/%E5%85%89%E6%A0%85%E5%8C%96.png" alt="Alt text"></p><p>计算机图形学下关于“实时”的定义：&gt;30fps，&lt;30fps称为离线</p><p><strong>计算机视觉与计算机图形学的区别：</strong><br><img src="/posts/40876/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="Alt text"></p><h1 id="二、线代基础"><a href="#二、线代基础" class="headerlink" title="二、线代基础"></a>二、线代基础</h1><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><p><strong>叉乘基本运算</strong><br>$$<br>\displaylines{\vec{a}\times\vec{b}&#x3D;-\vec{b}\times\vec{a}\\<br>\vec{a}\times\vec{a}&#x3D;\vec{0} \\<br>\vec{a}\times(\vec{b}+\vec{c})&#x3D;\vec{a}\times\vec{b}+\vec{a}\times\vec{c} \\<br>\vec{a}\times(k\vec{b})&#x3D;k(\vec{a}\times\vec{b})}<br>$$</p><p>图形学叉乘应用：判断左&#x2F;右&amp;内&#x2F;外</p><p><strong>正交坐标系定义</strong><br>$$<br>\displaylines{<br>||\vec{u}||&#x3D;||\vec{v}||&#x3D;||\vec{w}||\\<br>\vec{u}\cdot\vec{v}&#x3D;\vec{v}\cdot\vec{w}&#x3D;\vec{w}\cdot\vec{u}\\<br>\vec{w}&#x3D;\vec{u}\times\vec{v}（右手）\\<br>\vec{p}&#x3D;(\vec{p}\cdot\vec{u})\vec{u}+(\vec{p}\cdot\vec{v})\vec{v}+(\vec{p}\cdot\vec{w})\vec{w}}<br>$$</p><p><strong>矩阵乘法</strong><br>要第几行第几列，就去找第几行和第几列，左管行，右管列</p><p>设矩阵A和矩阵B，则：</p><p>1、AB和BA大多数情况下不等</p><p>2、只要不涉及前后交换，以下等式均成立<br>$$<br>\displaylines{<br>(AB)C&#x3D;A(BC)\\<br>A(B+C) &#x3D; AB +AC\\<br>(A+B)C &#x3D;AC ＋BC\\<br>}<br>$$</p><p><strong>矩阵和向量的乘法</strong></p><p>总是把向量视作列向量并置于乘号右边</p><p><strong>矩阵转置（ij -&gt; ji）</strong></p><p>$$<br>(AB)^T&#x3D;B^TA^T<br>$$</p><p><strong>单位矩阵</strong></p><p>$$<br>\displaylines{<br>AA^{-1}&#x3D;A^{-1}A&#x3D;I\\<br>AB^{-1}&#x3D;B^{-1}A^{-1}<br>}<br>$$</p><p><strong>向量乘法的矩阵形式</strong></p><p>$$<br>\displaylines{<br>\vec{a}\cdot\vec{b}&#x3D;\vec{a}^T\vec{b}\\<br>\vec{a}\times\vec{b}&#x3D;A^*b<br>}<br>$$</p><h2 id="向量变换"><a href="#向量变换" class="headerlink" title="向量变换"></a>向量变换</h2><h3 id="2d"><a href="#2d" class="headerlink" title="2d"></a>2d</h3><h4 id="线性变换"><a href="#线性变换" class="headerlink" title="线性变换"></a>线性变换</h4><table><thead><tr><th align="center">缩放</th><th align="center">切变</th></tr></thead><tbody><tr><td align="center"><img src="/posts/40876/%E7%BA%BF%E6%80%A7%E5%8F%98%E5%8C%96-%E7%BC%A9%E6%94%BE.png" alt="Alt text"></td><td align="center"><img src="/posts/40876/%E7%BA%BF%E6%80%A7%E5%8F%98%E5%8C%96-%E5%88%87%E5%8F%98.png" alt="Alt text"></td></tr><tr><td align="center"><strong>对称</strong></td><td align="center"><strong>旋转</strong></td></tr><tr><td align="center"><img src="/posts/40876/%E7%BA%BF%E6%80%A7%E5%8F%98%E5%8C%96-%E5%AF%B9%E7%A7%B0.png" alt="Alt text"></td><td align="center"><img src="/posts/40876/%E7%BA%BF%E6%80%A7%E5%8F%98%E5%8C%96-%E6%97%8B%E8%BD%AC.png" alt="Alt text"></td></tr></tbody></table><p>相同维度线性变化：<br>$$<br>\displaylines{<br>x’&#x3D;ax+by\\<br>y’&#x3D;cx+dy\\<br>\left[<br>\begin{matrix}<br>x’\\<br>y’\\<br>\end{matrix}<br>\right]&#x3D;<br>\left[<br>\begin{matrix}<br>a&amp;b\\<br>c&amp;d\\<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x\\<br>y\\<br>\end{matrix}<br>\right]\\<br>x’&#x3D;Mx<br>}<br>$$</p><h4 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h4><p>点(x,y,1)向量(x,y,0)则有：</p><p>点-点&#x3D;向量，向量$\pm$向量&#x3D;向量，点+向量&#x3D;点，点+点&#x3D;两点的中点</p><p>在齐次坐标中，$\left(\begin{matrix}x\\ y\\ w \end{matrix} \right)$都视作$\left(\begin{matrix}x&#x2F;w\\ y&#x2F;w\\ 1 \end{matrix}\right)$，其中$w≠0$</p><h4 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h4><p>仿射变化&#x3D;线性变换+平移</p><table><thead><tr><th><img src="/posts/40876/%E4%BB%BF%E5%B0%84%E5%8F%98%E5%8C%96.png" alt="Alt text"></th><th><img src="/posts/40876/%E4%BB%BF%E5%B0%84%E5%8F%98%E5%8C%96-2d%20transformation.png" alt="Alt text"></th></tr></thead></table><p>矩阵相乘不满足结合律</p><p>例如，先旋转再平移和先平移再旋转所得结果不一样</p><h4 id="变换合成（结合律的体现）"><a href="#变换合成（结合律的体现）" class="headerlink" title="变换合成（结合律的体现）"></a>变换合成（结合律的体现）</h4><p><img src="/posts/40876/%E5%90%88%E6%88%90%E5%8F%98%E6%8D%A2.png" alt="Alt text"></p><h3 id="3d"><a href="#3d" class="headerlink" title="3d"></a>3d</h3><table><thead><tr><th align="center">平移</th><th align="center">缩放</th></tr></thead><tbody><tr><td align="center"><img src="/posts/40876/%E5%B9%B3%E7%A7%BB.png" alt="Alt text"></td><td align="center"><img src="/posts/40876/%E7%BC%A9%E6%94%BE.png" alt="Alt text"></td></tr></tbody></table><table><thead><tr><th>旋转</th><th></th></tr></thead><tbody><tr><td><img src="/posts/40876/%E6%97%8B%E8%BD%AC1.png" alt="Alt text"></td><td><img src="/posts/40876/%E6%97%8B%E8%BD%AC2.png" alt="Alt text"></td></tr></tbody></table><p>3d旋转变换矩阵遵循循环对称：$X\times Y&#x3D;Z,\ \ Y\times Z&#x3D;X,\ \ Z\times X&#x3D;Y$</p><p>合成的旋转变换：$R_{xyz}(\alpha,\beta,\gamma)&#x3D;R_x(\alpha)R_y(\beta)R_z(\gamma)$</p><h4 id="罗德里格斯旋转公式"><a href="#罗德里格斯旋转公式" class="headerlink" title="罗德里格斯旋转公式"></a>罗德里格斯旋转公式</h4><p>绕旋转轴n旋转α角度<br>$$<br>R(n,\alpha)&#x3D;cos(\alpha)E+(1-cos(\alpha))nn^T+sin(\alpha)<br>\left(\begin{matrix}<br>0 &amp; -n_z&amp; n_y\\<br>n_z &amp; 0&amp; -n_x\\<br>-n_y &amp; n_x&amp; 0<br>\end{matrix}\right)<br>$$<br>推导过程：</p><a href="https://zhuanlan.zhihu.com/p/113299607?utm_source=qq&utm_medium=social&utm_oi=605668290971045888" target="_blank" title="罗德里格斯公式Rodrigues'Rotation Formula推导" referrerpolicy="no-referrer" class="link_card"><div class="link_icon"><svg t="1670307855063" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="19066" width="200" height="200"><path d="M504.064 516.608m-384.256 0a384.256 384.256 0 1 0 768.512 0 384.256 384.256 0 1 0-768.512 0Z" fill="#009CF5" p-id="19068"/><path d="M746.112 270.464L472.448 485.12l63.104 63.104L750.08 274.56c2.304-2.688-1.28-6.144-3.968-4.096z" fill="#FF4C3A" p-id="19069"/><path d="M262.016 762.752l273.664-214.528-63.104-63.104-214.656 273.536c-2.176 2.688 1.28 6.144 4.096 4.096z" fill="#FFFFFF" p-id="19070"/><path d="M505.216 155.136c-3.2 0-5.888 2.56-5.888 5.888v53.504c0 3.2 2.56 5.888 5.888 5.888s5.888-2.56 5.888-5.888v-53.504c-0.128-3.2-2.688-5.888-5.888-5.888zM442.368 160.512c-3.2 0.512-5.376 3.584-4.736 6.784l9.344 52.736c0.512 3.2 3.584 5.376 6.784 4.736 3.2-0.512 5.376-3.584 4.736-6.784l-9.344-52.736c-0.512-3.2-3.584-5.376-6.784-4.736zM396.288 234.368c1.152 3.072 4.48 4.608 7.552 3.456 3.072-1.152 4.608-4.48 3.456-7.552l-18.304-50.304c-1.152-3.072-4.48-4.608-7.552-3.456-3.072 1.152-4.608 4.48-3.456 7.552l18.304 50.304zM348.928 257.408c1.664 2.816 5.248 3.712 7.936 2.176s3.712-5.248 2.176-7.936l-26.752-46.336c-1.664-2.816-5.248-3.712-7.936-2.176-2.816 1.664-3.712 5.248-2.176 7.936l26.752 46.336zM306.304 288.256c2.048 2.432 5.76 2.816 8.192 0.768 2.432-2.048 2.816-5.76 0.768-8.192l-34.432-40.96c-2.048-2.432-5.76-2.816-8.192-0.768-2.432 2.048-2.816 5.76-0.768 8.192l34.432 40.96zM269.696 326.144c2.432 2.048 6.144 1.792 8.192-0.768 2.048-2.432 1.792-6.144-0.768-8.192l-40.96-34.432c-2.432-2.048-6.144-1.792-8.192 0.768-2.048 2.432-1.792 6.144 0.768 8.192l40.96 34.432zM193.792 342.912l46.336 26.752c2.816 1.664 6.4 0.64 7.936-2.176 1.664-2.816 0.64-6.4-2.176-8.064L199.552 332.8c-2.816-1.664-6.4-0.64-7.936 2.176-1.664 2.688-0.64 6.272 2.176 7.936zM168.32 399.488l50.304 18.304c3.072 1.152 6.4-0.512 7.552-3.456 1.152-3.072-0.512-6.4-3.456-7.552l-50.304-18.304c-3.072-1.152-6.4 0.512-7.552 3.456-1.152 3.072 0.384 6.4 3.456 7.552zM207.872 457.344l-52.736-9.344c-3.2-0.512-6.272 1.536-6.784 4.736-0.512 3.2 1.536 6.272 4.736 6.784l52.736 9.344c3.2 0.512 6.272-1.536 6.784-4.736 0.512-3.2-1.536-6.272-4.736-6.784zM201.984 509.568H148.48c-3.2 0-5.888 2.56-5.888 5.888 0 3.2 2.56 5.888 5.888 5.888h53.504c3.2 0 5.888-2.56 5.888-5.888 0-3.2-2.56-5.888-5.888-5.888zM205.44 562.176l-52.736 9.344c-3.2 0.512-5.376 3.584-4.736 6.784 0.512 3.2 3.584 5.376 6.784 4.736l52.736-9.344c3.2-0.512 5.376-3.584 4.736-6.784s-3.584-5.248-6.784-4.736zM217.856 613.376l-50.304 18.304c-3.072 1.152-4.608 4.48-3.456 7.552 1.152 3.072 4.48 4.608 7.552 3.456l50.304-18.304c3.072-1.152 4.608-4.48 3.456-7.552-1.152-3.072-4.48-4.608-7.552-3.456zM238.976 661.504l-46.336 26.752c-2.816 1.664-3.712 5.248-2.176 8.064 1.664 2.816 5.248 3.712 8.064 2.176l46.336-26.752c2.816-1.664 3.712-5.248 2.176-8.064-1.664-2.816-5.248-3.712-8.064-2.176zM268.16 705.408l-40.96 34.432c-2.432 2.048-2.816 5.76-0.768 8.192 2.048 2.432 5.76 2.816 8.192 0.768l40.96-34.432c2.432-2.048 2.816-5.76 0.768-8.192-1.92-2.56-5.632-2.816-8.192-0.768zM304.512 743.424l-34.432 40.96c-2.048 2.432-1.792 6.144 0.768 8.192 2.432 2.048 6.144 1.792 8.192-0.768l34.432-40.96c2.048-2.432 1.792-6.144-0.768-8.192-2.304-1.92-6.016-1.664-8.192 0.768zM347.008 774.656l-26.752 46.336c-1.664 2.816-0.64 6.4 2.176 7.936 2.816 1.664 6.4 0.64 8.064-2.176l26.752-46.336c1.664-2.816 0.64-6.4-2.176-7.936-2.816-1.536-6.4-0.64-8.064 2.176zM394.24 798.08l-18.304 50.304c-1.152 3.072 0.512 6.4 3.456 7.552 3.072 1.152 6.4-0.512 7.552-3.456l18.304-50.304c1.152-3.072-0.512-6.4-3.456-7.552-3.072-1.152-6.528 0.384-7.552 3.456zM440.192 872.32c3.2 0.512 6.272-1.536 6.784-4.736l9.344-52.736c0.512-3.2-1.536-6.272-4.736-6.784-3.2-0.512-6.272 1.536-6.784 4.736l-9.344 52.736c-0.64 3.2 1.536 6.272 4.736 6.784zM502.912 878.08c3.2 0 5.888-2.56 5.888-5.888v-53.504c0-3.2-2.56-5.888-5.888-5.888-3.2 0-5.888 2.56-5.888 5.888v53.504c0 3.2 2.688 5.888 5.888 5.888zM549.632 815.232l9.344 52.736c0.512 3.2 3.584 5.376 6.784 4.736 3.2-0.512 5.376-3.584 4.736-6.784l-9.344-52.736c-0.512-3.2-3.584-5.376-6.784-4.736-3.2 0.512-5.248 3.584-4.736 6.784zM600.832 802.816l18.304 50.304c1.152 3.072 4.48 4.608 7.552 3.456 3.072-1.152 4.608-4.48 3.456-7.552L611.84 798.72c-1.152-3.072-4.48-4.608-7.552-3.456-3.072 1.152-4.608 4.48-3.456 7.552zM649.088 781.696l26.752 46.336c1.664 2.816 5.248 3.712 8.064 2.176 2.816-1.664 3.712-5.248 2.176-8.064l-26.88-46.336c-1.664-2.816-5.248-3.712-8.064-2.176-2.816 1.664-3.712 5.248-2.048 8.064zM692.864 752.384l34.432 40.96c2.048 2.432 5.76 2.816 8.192 0.768 2.432-2.048 2.816-5.76 0.768-8.192l-34.432-40.96c-2.048-2.432-5.76-2.816-8.192-0.768-2.56 2.048-2.816 5.76-0.768 8.192zM730.88 716.032l40.96 34.432c2.432 2.048 6.144 1.792 8.192-0.768 2.048-2.432 1.792-6.144-0.768-8.192l-40.96-34.432c-2.432-2.048-6.144-1.792-8.192 0.768-1.92 2.432-1.664 6.144 0.768 8.192zM762.112 673.664l46.336 26.752c2.816 1.664 6.4 0.64 8.064-2.176 1.664-2.816 0.64-6.4-2.176-7.936L768 663.552c-2.816-1.664-6.4-0.64-8.064 2.176-1.536 2.688-0.64 6.272 2.176 7.936zM785.536 626.432l50.304 18.304c3.072 1.152 6.4-0.512 7.552-3.456 1.152-3.072-0.512-6.4-3.456-7.552l-50.304-18.304c-3.072-1.152-6.4 0.512-7.552 3.456-1.152 3.072 0.384 6.4 3.456 7.552zM800.256 575.872l52.736 9.344c3.2 0.512 6.272-1.536 6.784-4.736 0.512-3.2-1.536-6.272-4.736-6.784l-52.736-9.344c-3.2-0.512-6.272 1.536-6.784 4.736-0.512 3.2 1.536 6.272 4.736 6.784zM800.256 517.76c0 3.2 2.56 5.888 5.888 5.888h53.504c3.2 0 5.888-2.56 5.888-5.888 0-3.2-2.56-5.888-5.888-5.888h-53.504c-3.328 0-5.888 2.56-5.888 5.888zM802.688 471.04l52.736-9.344c3.2-0.512 5.376-3.584 4.736-6.784-0.512-3.2-3.584-5.376-6.784-4.736l-52.736 9.344c-3.2 0.512-5.376 3.584-4.736 6.784 0.512 3.2 3.584 5.248 6.784 4.736zM790.272 419.84l50.304-18.304c3.072-1.152 4.608-4.48 3.456-7.552-1.152-3.072-4.48-4.608-7.552-3.456l-50.304 18.304c-3.072 1.152-4.608 4.48-3.456 7.552 1.152 2.944 4.48 4.608 7.552 3.456zM769.152 371.584l46.336-26.752c2.816-1.664 3.712-5.248 2.176-7.936-1.664-2.816-5.248-3.712-8.064-2.176l-46.336 26.752c-2.816 1.664-3.712 5.248-2.176 8.064 1.664 2.688 5.248 3.712 8.064 2.048zM739.84 327.808l40.96-34.432c2.432-2.048 2.816-5.76 0.768-8.192-2.048-2.432-5.76-2.816-8.192-0.768l-40.96 34.432c-2.432 2.048-2.816 5.76-0.768 8.192 2.048 2.56 5.76 2.816 8.192 0.768zM703.488 289.664l34.432-40.96c2.048-2.432 1.792-6.144-0.768-8.192-2.432-2.048-6.144-1.792-8.192 0.768l-34.432 40.96c-2.048 2.432-1.792 6.144 0.768 8.192 2.432 2.048 6.144 1.792 8.192-0.768zM661.12 258.56l26.752-46.336c1.664-2.816 0.64-6.4-2.176-7.936-2.816-1.664-6.4-0.64-8.064 2.176l-26.752 46.336c-1.664 2.816-0.64 6.4 2.176 7.936 2.816 1.536 6.4 0.64 8.064-2.176zM613.888 235.136l18.304-50.304c1.152-3.072-0.512-6.4-3.456-7.552-3.072-1.152-6.4 0.512-7.552 3.456L602.88 231.168c-1.152 3.072 0.512 6.4 3.456 7.552 3.072 1.024 6.4-0.512 7.552-3.584zM556.544 225.152c3.2 0.512 6.272-1.536 6.784-4.736l9.344-52.736c0.512-3.2-1.536-6.272-4.736-6.784-3.2-0.512-6.272 1.536-6.784 4.736l-9.344 52.736c-0.512 3.2 1.536 6.144 4.736 6.784zM273.536 290.432c2.432 2.432 6.528 2.432 8.96 0 2.432-2.432 2.432-6.528 0-8.96l-21.12-21.12c-2.432-2.432-6.528-2.432-8.96 0-2.432 2.432-2.432 6.528 0 8.96l21.12 21.12zM237.824 333.824c2.944 2.048 6.912 1.28 8.832-1.536 2.048-2.944 1.28-6.912-1.536-8.832l-24.448-17.152c-2.944-2.048-6.912-1.28-8.832 1.536s-1.28 6.912 1.536 8.832l24.448 17.152zM183.04 370.176l27.136 12.672c3.2 1.536 7.04 0.128 8.448-3.072 1.536-3.2 0.128-7.04-3.072-8.448l-27.136-12.672c-3.2-1.536-7.04-0.128-8.448 3.072-1.536 3.2-0.128 7.04 3.072 8.448zM194.688 423.68l-28.928-7.68c-3.456-0.896-6.912 1.152-7.808 4.48-0.896 3.456 1.152 6.912 4.48 7.808l28.928 7.68c3.456 0.896 6.912-1.152 7.808-4.48 0.896-3.456-1.152-6.912-4.48-7.808zM183.168 478.72l-29.824-2.56c-3.456-0.256-6.656 2.304-6.912 5.76-0.256 3.456 2.304 6.656 5.76 6.912l29.824 2.56c3.456 0.256 6.656-2.304 6.912-5.76 0.384-3.456-2.176-6.528-5.76-6.912zM181.504 535.04l-29.824 2.56c-3.456 0.256-6.144 3.456-5.76 6.912 0.256 3.456 3.456 6.144 6.912 5.76l29.824-2.56c3.456-0.256 6.144-3.456 5.76-6.912-0.256-3.456-3.328-6.016-6.912-5.76zM191.36 590.72l-28.928 7.68c-3.456 0.896-5.376 4.352-4.48 7.808 0.896 3.456 4.352 5.376 7.808 4.48l28.928-7.68c3.456-0.896 5.376-4.352 4.48-7.808-0.896-3.328-4.352-5.376-7.808-4.48zM207.232 644.224l-27.136 12.672c-3.2 1.536-4.608 5.248-3.072 8.448 1.536 3.2 5.248 4.608 8.448 3.072l27.136-12.672c3.2-1.536 4.608-5.248 3.072-8.448-1.408-3.2-5.248-4.48-8.448-3.072zM233.984 693.888l-24.448 17.152c-2.944 2.048-3.584 6.016-1.536 8.832 2.048 2.944 6.016 3.584 8.832 1.536l24.448-17.152c2.944-2.048 3.584-6.016 1.536-8.832-2.048-2.944-6.016-3.584-8.832-1.536zM310.912 775.552L293.76 800c-2.048 2.944-1.28 6.912 1.536 8.832 2.944 2.048 6.912 1.28 8.832-1.536l17.152-24.448c2.048-2.944 1.28-6.912-1.536-8.832-2.816-2.048-6.912-1.408-8.832 1.536zM349.184 840.704c3.2 1.536 7.04 0.128 8.448-3.072l12.672-27.136c1.536-3.2 0.128-7.04-3.072-8.448-3.2-1.536-7.04-0.128-8.448 3.072l-12.672 27.136c-1.408 3.2-0.128 6.912 3.072 8.448zM407.808 862.72c3.456 0.896 6.912-1.152 7.808-4.48l7.68-28.928c0.896-3.456-1.152-6.912-4.48-7.808-3.456-0.896-6.912 1.152-7.808 4.48l-7.68 28.928c-0.896 3.328 1.152 6.912 4.48 7.808zM469.376 874.112c3.456 0.256 6.656-2.304 6.912-5.76l2.56-29.824c0.256-3.456-2.304-6.656-5.76-6.912-3.456-0.256-6.656 2.304-6.912 5.76l-2.56 29.824c-0.256 3.584 2.304 6.656 5.76 6.912zM522.496 839.168l2.56 29.824c0.256 3.456 3.456 6.144 6.912 5.76 3.456-0.256 6.144-3.456 5.76-6.912l-2.56-29.824c-0.256-3.456-3.456-6.144-6.912-5.76-3.456 0.256-6.016 3.328-5.76 6.912zM578.176 830.976l7.68 28.928c0.896 3.456 4.352 5.376 7.808 4.48 3.456-0.896 5.376-4.352 4.48-7.808l-7.68-28.928c-0.896-3.456-4.352-5.376-7.808-4.48-3.328 0.896-5.376 4.48-4.48 7.808zM631.68 813.312l12.672 27.136c1.536 3.2 5.248 4.608 8.448 3.072 3.2-1.536 4.608-5.248 3.072-8.448l-12.672-27.136c-1.536-3.2-5.248-4.608-8.448-3.072-3.2 1.536-4.48 5.248-3.072 8.448zM681.344 786.688l17.152 24.448c2.048 2.944 6.016 3.584 8.832 1.536 2.944-2.048 3.584-6.016 1.536-8.832l-17.152-24.448c-2.048-2.944-6.016-3.584-8.832-1.536-2.944 1.92-3.584 5.888-1.536 8.832zM725.504 751.744l21.12 21.12c2.432 2.432 6.528 2.432 8.96 0 2.432-2.432 2.432-6.528 0-8.96l-21.12-21.12c-2.432-2.432-6.528-2.432-8.96 0-2.432 2.432-2.432 6.528 0 8.96zM763.008 709.76l24.448 17.152c2.944 2.048 6.912 1.28 8.832-1.536 2.048-2.944 1.28-6.912-1.536-8.832l-24.448-17.152c-2.944-2.048-6.912-1.28-8.832 1.536-2.048 2.816-1.408 6.784 1.536 8.832zM792.576 661.888l27.136 12.672c3.2 1.536 7.04 0.128 8.448-3.072 1.536-3.2 0.128-7.04-3.072-8.448l-27.136-12.672c-3.2-1.536-7.04-0.128-8.448 3.072-1.536 3.2-0.128 6.912 3.072 8.448zM813.44 609.536l28.928 7.68c3.456 0.896 6.912-1.152 7.808-4.48 0.896-3.456-1.152-6.912-4.48-7.808l-28.928-7.68c-3.456-0.896-6.912 1.152-7.808 4.48-0.896 3.456 1.024 6.912 4.48 7.808zM824.832 554.368l29.824 2.56c3.456 0.256 6.656-2.304 6.912-5.76 0.256-3.456-2.304-6.656-5.76-6.912l-29.824-2.56c-3.456-0.256-6.656 2.304-6.912 5.76-0.256 3.584 2.304 6.656 5.76 6.912zM826.624 498.176l29.824-2.56c3.456-0.256 6.144-3.456 5.76-6.912-0.256-3.456-3.456-6.144-6.912-5.76l-29.824 2.56c-3.456 0.256-6.144 3.456-5.76 6.912 0.256 3.456 3.328 6.016 6.912 5.76zM818.432 442.368l28.928-7.68c3.456-0.896 5.376-4.352 4.48-7.808-0.896-3.456-4.352-5.376-7.808-4.48l-28.928 7.68c-3.456 0.896-5.376 4.352-4.48 7.808 0.896 3.456 4.48 5.376 7.808 4.48zM800.768 388.992l27.136-12.672c3.2-1.536 4.608-5.248 3.072-8.448-1.536-3.2-5.248-4.608-8.448-3.072l-27.136 12.672c-3.2 1.536-4.608 5.248-3.072 8.448 1.536 3.072 5.248 4.48 8.448 3.072zM774.144 339.328l24.448-17.152c2.944-2.048 3.584-6.016 1.536-8.832-2.048-2.944-6.016-3.584-8.832-1.536L766.848 328.96c-2.944 2.048-3.584 6.016-1.536 8.832 1.92 2.816 5.888 3.584 8.832 1.536zM697.216 257.664l17.152-24.448c2.048-2.944 1.28-6.912-1.536-8.832-2.944-2.048-6.912-1.28-8.832 1.536l-17.152 24.448c-2.048 2.944-1.28 6.912 1.536 8.832 2.816 2.048 6.784 1.408 8.832-1.536zM658.944 192.512c-3.2-1.536-7.04-0.128-8.448 3.072l-12.672 27.136c-1.536 3.2-0.128 7.04 3.072 8.448 3.2 1.536 7.04 0.128 8.448-3.072l12.672-27.136c1.408-3.2 0-7.04-3.072-8.448zM600.192 170.496c-3.456-0.896-6.912 1.152-7.808 4.48l-7.68 28.928c-0.896 3.456 1.152 6.912 4.48 7.808 3.456 0.896 6.912-1.152 7.808-4.48l7.68-28.928c1.024-3.328-1.024-6.912-4.48-7.808zM534.912 201.6c3.456 0.256 6.656-2.304 6.912-5.76l2.56-29.824c0.256-3.456-2.304-6.656-5.76-6.912-3.456-0.256-6.656 2.304-6.912 5.76l-2.56 29.824c-0.256 3.456 2.304 6.528 5.76 6.912zM476.032 158.464c-3.456 0.256-6.144 3.456-5.76 6.912l2.56 29.824c0.256 3.456 3.456 6.144 6.912 5.76 3.456-0.256 6.144-3.456 5.76-6.912l-2.56-29.824c-0.256-3.456-3.328-6.016-6.912-5.76zM422.144 173.312c-0.896-3.456-4.352-5.376-7.808-4.48-3.456 0.896-5.376 4.352-4.48 7.808l7.68 28.928c0.896 3.456 4.352 5.376 7.808 4.48 3.456-0.896 5.376-4.352 4.48-7.808l-7.68-28.928zM376.448 219.776l-12.672-27.136c-1.536-3.2-5.248-4.608-8.448-3.072-3.2 1.536-4.608 5.248-3.072 8.448L364.8 225.28c1.536 3.2 5.248 4.608 8.448 3.072 3.2-1.536 4.608-5.376 3.2-8.576zM316.416 253.824c2.048 2.944 6.016 3.584 8.832 1.536 2.944-2.048 3.584-6.016 1.536-8.832l-17.152-24.448c-2.048-2.944-6.016-3.584-8.832-1.536-2.944 2.048-3.584 6.016-1.536 8.832l17.152 24.448z" fill="#FFFFFF" p-id="19071"/></svg></div><div class="link_content"><div class="link_title">罗德里格斯公式Rodrigues'Rotation Formula推导</div></div></a><p><strong>四元数：旋转与旋转之间的差值，具体内容略去</strong></p><h2 id="视图-相机变换"><a href="#视图-相机变换" class="headerlink" title="视图 &#x2F; 相机变换"></a>视图 &#x2F; 相机变换</h2><h3 id="如何将三维变成二维并在屏幕上显示出来"><a href="#如何将三维变成二维并在屏幕上显示出来" class="headerlink" title="如何将三维变成二维并在屏幕上显示出来"></a>如何将三维变成二维并在屏幕上显示出来</h3><p>1、模型变换 (M)2、相机变换 (V)3、投影变换 (P)</p><h3 id="定义相机属性"><a href="#定义相机属性" class="headerlink" title="定义相机属性"></a>定义相机属性</h3><p>1、位置 $\vec{e}$</p><p>2、视线方向 $\widehat{g}$</p><p>3、垂直方向 $\widehat{t}$</p><p>初始：up at Y, look at -Z</p><p>如果把摄像机和世界一起变换，那么照片是一样的，所以把摄像机变换到新坐标系的原点，其他所有物体也做同样的变换</p><h3 id="teg坐标系怎么转变为xyz坐标系"><a href="#teg坐标系怎么转变为xyz坐标系" class="headerlink" title="teg坐标系怎么转变为xyz坐标系"></a>teg坐标系怎么转变为xyz坐标系</h3><p>$M_{view}$ in Math?</p><p>$M_{view}$&#x3D;$R_{view}$$T_{view}$</p><p>1、先做平移，$T_{view}&#x3D;\left[\begin{matrix}1&amp;0&amp;0&amp;-x_e\\ 0&amp;1&amp;0&amp;-y_e\\ 0&amp;0&amp;1&amp;-z_e\\ 0&amp;0&amp;0&amp;1\end{matrix}\right]$</p><p>2、再做旋转，顺着思路要把 $\widehat{g}$ 旋转到$-Z$坐标轴，把 $\widehat{t}$ 旋转到$Y$坐标轴，把$（g\times t）$旋转到 $x$ 坐标轴，但这样的旋转矩阵非常难写</p><p>​  所以采用逆向思路，把坐标轴移到相机坐标轴，通过逆操作写（该旋转矩阵为正交矩阵，其逆矩阵就是它的转置矩阵）（基变换）</p><p>$$<br>    R^{-1}_{view}&#x3D;<br>    \left[\begin{matrix}<br>    x_{\widehat g\times \widehat t} &amp; x_t &amp; x_{-g} &amp; 0 \\<br>    y_{\widehat g\times \widehat t} &amp; y_t &amp; y_{-g} &amp; 0 \\<br>    z_{\widehat g\times \widehat t} &amp; z_t &amp; z_{-g} &amp; 0 \\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>    \end{matrix}\right]<br>$$</p><p>$$<br>    R_{view}&#x3D;<br>    \left[\begin{matrix}<br>    x_{\widehat g\times \widehat t} &amp; y_{\widehat g\times \widehat t} &amp; z_{\widehat g\times \widehat t} &amp; 0\\<br>    x_t &amp; y_t &amp; z_t &amp; 0\\<br>    x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0\\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>    \end{matrix}\right]<br>$$</p><h3 id="投影变换（难点）"><a href="#投影变换（难点）" class="headerlink" title="投影变换（难点）"></a>投影变换（难点）</h3><p><img src="/posts/40876/%E6%AD%A3%E4%BA%A4or%E9%80%8F%E8%A7%86.png" alt="Alt text"></p><h4 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h4><p>相机位置无限远，没有远近概念（忽略深度信息）</p><p>步骤：先做平移，再做缩放，目标是吧投影全塞在 $[-1,1]^2$ 的长方体内</p><p><img src="/posts/40876/%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1%E6%AD%A5%E9%AA%A4.png" alt="Alt text"></p><h4 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h4><p>用的最广泛的投影，近大远小，</p><p>根据已知的$Near、Far、Fov、Aspect$确定透视投影的投影矩阵，如下<br>$$<br>M_{frustum}&#x3D;<br>\left[\begin{matrix}<br>\frac{cot\frac{FOV}{2}}{Aspect}&amp;0&amp;0&amp;0 \\<br>0&amp;cot{\frac{FOV}{2}}&amp;0&amp;0 \\<br>0&amp;0&amp;\frac{Near+Far}{Near-Far}&amp;-\frac{2Near·Far}{Near-Far} \\<br>0&amp;0&amp;1&amp;0<br>\end{matrix}\right]<br>$$<br>具体推导如下：<br><img src="/posts/40876/%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81P79.png" alt="Alt text"></p><p>关于课上的思考问题，视锥体压缩成长方体以后，内部的点的z值是更偏向于近平面还是更偏向于远平面？</p><!-- <a href="链接"  title="标题" referrerPolicy="no-referrer" class="link_card"><div class="link_icon"><img src="图标" class="no-lightbox"></div><div class="link_content"><div class="link_title">标题</div><div class="link_desc">介绍</div></div></a> --><a href="https://zhuanlan.zhihu.com/p/122411512?utm_source=qq&utm_medium=social&utm_oi=605668290971045888" target="_blank" title="[图形学笔记]推导投影矩阵" referrerpolicy="no-referrer" class="link_card"><div class="link_icon"><svg t="1670307855063" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="19066" width="200" height="200"><path d="M504.064 516.608m-384.256 0a384.256 384.256 0 1 0 768.512 0 384.256 384.256 0 1 0-768.512 0Z" fill="#009CF5" p-id="19068"/><path d="M746.112 270.464L472.448 485.12l63.104 63.104L750.08 274.56c2.304-2.688-1.28-6.144-3.968-4.096z" fill="#FF4C3A" p-id="19069"/><path d="M262.016 762.752l273.664-214.528-63.104-63.104-214.656 273.536c-2.176 2.688 1.28 6.144 4.096 4.096z" fill="#FFFFFF" p-id="19070"/><path d="M505.216 155.136c-3.2 0-5.888 2.56-5.888 5.888v53.504c0 3.2 2.56 5.888 5.888 5.888s5.888-2.56 5.888-5.888v-53.504c-0.128-3.2-2.688-5.888-5.888-5.888zM442.368 160.512c-3.2 0.512-5.376 3.584-4.736 6.784l9.344 52.736c0.512 3.2 3.584 5.376 6.784 4.736 3.2-0.512 5.376-3.584 4.736-6.784l-9.344-52.736c-0.512-3.2-3.584-5.376-6.784-4.736zM396.288 234.368c1.152 3.072 4.48 4.608 7.552 3.456 3.072-1.152 4.608-4.48 3.456-7.552l-18.304-50.304c-1.152-3.072-4.48-4.608-7.552-3.456-3.072 1.152-4.608 4.48-3.456 7.552l18.304 50.304zM348.928 257.408c1.664 2.816 5.248 3.712 7.936 2.176s3.712-5.248 2.176-7.936l-26.752-46.336c-1.664-2.816-5.248-3.712-7.936-2.176-2.816 1.664-3.712 5.248-2.176 7.936l26.752 46.336zM306.304 288.256c2.048 2.432 5.76 2.816 8.192 0.768 2.432-2.048 2.816-5.76 0.768-8.192l-34.432-40.96c-2.048-2.432-5.76-2.816-8.192-0.768-2.432 2.048-2.816 5.76-0.768 8.192l34.432 40.96zM269.696 326.144c2.432 2.048 6.144 1.792 8.192-0.768 2.048-2.432 1.792-6.144-0.768-8.192l-40.96-34.432c-2.432-2.048-6.144-1.792-8.192 0.768-2.048 2.432-1.792 6.144 0.768 8.192l40.96 34.432zM193.792 342.912l46.336 26.752c2.816 1.664 6.4 0.64 7.936-2.176 1.664-2.816 0.64-6.4-2.176-8.064L199.552 332.8c-2.816-1.664-6.4-0.64-7.936 2.176-1.664 2.688-0.64 6.272 2.176 7.936zM168.32 399.488l50.304 18.304c3.072 1.152 6.4-0.512 7.552-3.456 1.152-3.072-0.512-6.4-3.456-7.552l-50.304-18.304c-3.072-1.152-6.4 0.512-7.552 3.456-1.152 3.072 0.384 6.4 3.456 7.552zM207.872 457.344l-52.736-9.344c-3.2-0.512-6.272 1.536-6.784 4.736-0.512 3.2 1.536 6.272 4.736 6.784l52.736 9.344c3.2 0.512 6.272-1.536 6.784-4.736 0.512-3.2-1.536-6.272-4.736-6.784zM201.984 509.568H148.48c-3.2 0-5.888 2.56-5.888 5.888 0 3.2 2.56 5.888 5.888 5.888h53.504c3.2 0 5.888-2.56 5.888-5.888 0-3.2-2.56-5.888-5.888-5.888zM205.44 562.176l-52.736 9.344c-3.2 0.512-5.376 3.584-4.736 6.784 0.512 3.2 3.584 5.376 6.784 4.736l52.736-9.344c3.2-0.512 5.376-3.584 4.736-6.784s-3.584-5.248-6.784-4.736zM217.856 613.376l-50.304 18.304c-3.072 1.152-4.608 4.48-3.456 7.552 1.152 3.072 4.48 4.608 7.552 3.456l50.304-18.304c3.072-1.152 4.608-4.48 3.456-7.552-1.152-3.072-4.48-4.608-7.552-3.456zM238.976 661.504l-46.336 26.752c-2.816 1.664-3.712 5.248-2.176 8.064 1.664 2.816 5.248 3.712 8.064 2.176l46.336-26.752c2.816-1.664 3.712-5.248 2.176-8.064-1.664-2.816-5.248-3.712-8.064-2.176zM268.16 705.408l-40.96 34.432c-2.432 2.048-2.816 5.76-0.768 8.192 2.048 2.432 5.76 2.816 8.192 0.768l40.96-34.432c2.432-2.048 2.816-5.76 0.768-8.192-1.92-2.56-5.632-2.816-8.192-0.768zM304.512 743.424l-34.432 40.96c-2.048 2.432-1.792 6.144 0.768 8.192 2.432 2.048 6.144 1.792 8.192-0.768l34.432-40.96c2.048-2.432 1.792-6.144-0.768-8.192-2.304-1.92-6.016-1.664-8.192 0.768zM347.008 774.656l-26.752 46.336c-1.664 2.816-0.64 6.4 2.176 7.936 2.816 1.664 6.4 0.64 8.064-2.176l26.752-46.336c1.664-2.816 0.64-6.4-2.176-7.936-2.816-1.536-6.4-0.64-8.064 2.176zM394.24 798.08l-18.304 50.304c-1.152 3.072 0.512 6.4 3.456 7.552 3.072 1.152 6.4-0.512 7.552-3.456l18.304-50.304c1.152-3.072-0.512-6.4-3.456-7.552-3.072-1.152-6.528 0.384-7.552 3.456zM440.192 872.32c3.2 0.512 6.272-1.536 6.784-4.736l9.344-52.736c0.512-3.2-1.536-6.272-4.736-6.784-3.2-0.512-6.272 1.536-6.784 4.736l-9.344 52.736c-0.64 3.2 1.536 6.272 4.736 6.784zM502.912 878.08c3.2 0 5.888-2.56 5.888-5.888v-53.504c0-3.2-2.56-5.888-5.888-5.888-3.2 0-5.888 2.56-5.888 5.888v53.504c0 3.2 2.688 5.888 5.888 5.888zM549.632 815.232l9.344 52.736c0.512 3.2 3.584 5.376 6.784 4.736 3.2-0.512 5.376-3.584 4.736-6.784l-9.344-52.736c-0.512-3.2-3.584-5.376-6.784-4.736-3.2 0.512-5.248 3.584-4.736 6.784zM600.832 802.816l18.304 50.304c1.152 3.072 4.48 4.608 7.552 3.456 3.072-1.152 4.608-4.48 3.456-7.552L611.84 798.72c-1.152-3.072-4.48-4.608-7.552-3.456-3.072 1.152-4.608 4.48-3.456 7.552zM649.088 781.696l26.752 46.336c1.664 2.816 5.248 3.712 8.064 2.176 2.816-1.664 3.712-5.248 2.176-8.064l-26.88-46.336c-1.664-2.816-5.248-3.712-8.064-2.176-2.816 1.664-3.712 5.248-2.048 8.064zM692.864 752.384l34.432 40.96c2.048 2.432 5.76 2.816 8.192 0.768 2.432-2.048 2.816-5.76 0.768-8.192l-34.432-40.96c-2.048-2.432-5.76-2.816-8.192-0.768-2.56 2.048-2.816 5.76-0.768 8.192zM730.88 716.032l40.96 34.432c2.432 2.048 6.144 1.792 8.192-0.768 2.048-2.432 1.792-6.144-0.768-8.192l-40.96-34.432c-2.432-2.048-6.144-1.792-8.192 0.768-1.92 2.432-1.664 6.144 0.768 8.192zM762.112 673.664l46.336 26.752c2.816 1.664 6.4 0.64 8.064-2.176 1.664-2.816 0.64-6.4-2.176-7.936L768 663.552c-2.816-1.664-6.4-0.64-8.064 2.176-1.536 2.688-0.64 6.272 2.176 7.936zM785.536 626.432l50.304 18.304c3.072 1.152 6.4-0.512 7.552-3.456 1.152-3.072-0.512-6.4-3.456-7.552l-50.304-18.304c-3.072-1.152-6.4 0.512-7.552 3.456-1.152 3.072 0.384 6.4 3.456 7.552zM800.256 575.872l52.736 9.344c3.2 0.512 6.272-1.536 6.784-4.736 0.512-3.2-1.536-6.272-4.736-6.784l-52.736-9.344c-3.2-0.512-6.272 1.536-6.784 4.736-0.512 3.2 1.536 6.272 4.736 6.784zM800.256 517.76c0 3.2 2.56 5.888 5.888 5.888h53.504c3.2 0 5.888-2.56 5.888-5.888 0-3.2-2.56-5.888-5.888-5.888h-53.504c-3.328 0-5.888 2.56-5.888 5.888zM802.688 471.04l52.736-9.344c3.2-0.512 5.376-3.584 4.736-6.784-0.512-3.2-3.584-5.376-6.784-4.736l-52.736 9.344c-3.2 0.512-5.376 3.584-4.736 6.784 0.512 3.2 3.584 5.248 6.784 4.736zM790.272 419.84l50.304-18.304c3.072-1.152 4.608-4.48 3.456-7.552-1.152-3.072-4.48-4.608-7.552-3.456l-50.304 18.304c-3.072 1.152-4.608 4.48-3.456 7.552 1.152 2.944 4.48 4.608 7.552 3.456zM769.152 371.584l46.336-26.752c2.816-1.664 3.712-5.248 2.176-7.936-1.664-2.816-5.248-3.712-8.064-2.176l-46.336 26.752c-2.816 1.664-3.712 5.248-2.176 8.064 1.664 2.688 5.248 3.712 8.064 2.048zM739.84 327.808l40.96-34.432c2.432-2.048 2.816-5.76 0.768-8.192-2.048-2.432-5.76-2.816-8.192-0.768l-40.96 34.432c-2.432 2.048-2.816 5.76-0.768 8.192 2.048 2.56 5.76 2.816 8.192 0.768zM703.488 289.664l34.432-40.96c2.048-2.432 1.792-6.144-0.768-8.192-2.432-2.048-6.144-1.792-8.192 0.768l-34.432 40.96c-2.048 2.432-1.792 6.144 0.768 8.192 2.432 2.048 6.144 1.792 8.192-0.768zM661.12 258.56l26.752-46.336c1.664-2.816 0.64-6.4-2.176-7.936-2.816-1.664-6.4-0.64-8.064 2.176l-26.752 46.336c-1.664 2.816-0.64 6.4 2.176 7.936 2.816 1.536 6.4 0.64 8.064-2.176zM613.888 235.136l18.304-50.304c1.152-3.072-0.512-6.4-3.456-7.552-3.072-1.152-6.4 0.512-7.552 3.456L602.88 231.168c-1.152 3.072 0.512 6.4 3.456 7.552 3.072 1.024 6.4-0.512 7.552-3.584zM556.544 225.152c3.2 0.512 6.272-1.536 6.784-4.736l9.344-52.736c0.512-3.2-1.536-6.272-4.736-6.784-3.2-0.512-6.272 1.536-6.784 4.736l-9.344 52.736c-0.512 3.2 1.536 6.144 4.736 6.784zM273.536 290.432c2.432 2.432 6.528 2.432 8.96 0 2.432-2.432 2.432-6.528 0-8.96l-21.12-21.12c-2.432-2.432-6.528-2.432-8.96 0-2.432 2.432-2.432 6.528 0 8.96l21.12 21.12zM237.824 333.824c2.944 2.048 6.912 1.28 8.832-1.536 2.048-2.944 1.28-6.912-1.536-8.832l-24.448-17.152c-2.944-2.048-6.912-1.28-8.832 1.536s-1.28 6.912 1.536 8.832l24.448 17.152zM183.04 370.176l27.136 12.672c3.2 1.536 7.04 0.128 8.448-3.072 1.536-3.2 0.128-7.04-3.072-8.448l-27.136-12.672c-3.2-1.536-7.04-0.128-8.448 3.072-1.536 3.2-0.128 7.04 3.072 8.448zM194.688 423.68l-28.928-7.68c-3.456-0.896-6.912 1.152-7.808 4.48-0.896 3.456 1.152 6.912 4.48 7.808l28.928 7.68c3.456 0.896 6.912-1.152 7.808-4.48 0.896-3.456-1.152-6.912-4.48-7.808zM183.168 478.72l-29.824-2.56c-3.456-0.256-6.656 2.304-6.912 5.76-0.256 3.456 2.304 6.656 5.76 6.912l29.824 2.56c3.456 0.256 6.656-2.304 6.912-5.76 0.384-3.456-2.176-6.528-5.76-6.912zM181.504 535.04l-29.824 2.56c-3.456 0.256-6.144 3.456-5.76 6.912 0.256 3.456 3.456 6.144 6.912 5.76l29.824-2.56c3.456-0.256 6.144-3.456 5.76-6.912-0.256-3.456-3.328-6.016-6.912-5.76zM191.36 590.72l-28.928 7.68c-3.456 0.896-5.376 4.352-4.48 7.808 0.896 3.456 4.352 5.376 7.808 4.48l28.928-7.68c3.456-0.896 5.376-4.352 4.48-7.808-0.896-3.328-4.352-5.376-7.808-4.48zM207.232 644.224l-27.136 12.672c-3.2 1.536-4.608 5.248-3.072 8.448 1.536 3.2 5.248 4.608 8.448 3.072l27.136-12.672c3.2-1.536 4.608-5.248 3.072-8.448-1.408-3.2-5.248-4.48-8.448-3.072zM233.984 693.888l-24.448 17.152c-2.944 2.048-3.584 6.016-1.536 8.832 2.048 2.944 6.016 3.584 8.832 1.536l24.448-17.152c2.944-2.048 3.584-6.016 1.536-8.832-2.048-2.944-6.016-3.584-8.832-1.536zM310.912 775.552L293.76 800c-2.048 2.944-1.28 6.912 1.536 8.832 2.944 2.048 6.912 1.28 8.832-1.536l17.152-24.448c2.048-2.944 1.28-6.912-1.536-8.832-2.816-2.048-6.912-1.408-8.832 1.536zM349.184 840.704c3.2 1.536 7.04 0.128 8.448-3.072l12.672-27.136c1.536-3.2 0.128-7.04-3.072-8.448-3.2-1.536-7.04-0.128-8.448 3.072l-12.672 27.136c-1.408 3.2-0.128 6.912 3.072 8.448zM407.808 862.72c3.456 0.896 6.912-1.152 7.808-4.48l7.68-28.928c0.896-3.456-1.152-6.912-4.48-7.808-3.456-0.896-6.912 1.152-7.808 4.48l-7.68 28.928c-0.896 3.328 1.152 6.912 4.48 7.808zM469.376 874.112c3.456 0.256 6.656-2.304 6.912-5.76l2.56-29.824c0.256-3.456-2.304-6.656-5.76-6.912-3.456-0.256-6.656 2.304-6.912 5.76l-2.56 29.824c-0.256 3.584 2.304 6.656 5.76 6.912zM522.496 839.168l2.56 29.824c0.256 3.456 3.456 6.144 6.912 5.76 3.456-0.256 6.144-3.456 5.76-6.912l-2.56-29.824c-0.256-3.456-3.456-6.144-6.912-5.76-3.456 0.256-6.016 3.328-5.76 6.912zM578.176 830.976l7.68 28.928c0.896 3.456 4.352 5.376 7.808 4.48 3.456-0.896 5.376-4.352 4.48-7.808l-7.68-28.928c-0.896-3.456-4.352-5.376-7.808-4.48-3.328 0.896-5.376 4.48-4.48 7.808zM631.68 813.312l12.672 27.136c1.536 3.2 5.248 4.608 8.448 3.072 3.2-1.536 4.608-5.248 3.072-8.448l-12.672-27.136c-1.536-3.2-5.248-4.608-8.448-3.072-3.2 1.536-4.48 5.248-3.072 8.448zM681.344 786.688l17.152 24.448c2.048 2.944 6.016 3.584 8.832 1.536 2.944-2.048 3.584-6.016 1.536-8.832l-17.152-24.448c-2.048-2.944-6.016-3.584-8.832-1.536-2.944 1.92-3.584 5.888-1.536 8.832zM725.504 751.744l21.12 21.12c2.432 2.432 6.528 2.432 8.96 0 2.432-2.432 2.432-6.528 0-8.96l-21.12-21.12c-2.432-2.432-6.528-2.432-8.96 0-2.432 2.432-2.432 6.528 0 8.96zM763.008 709.76l24.448 17.152c2.944 2.048 6.912 1.28 8.832-1.536 2.048-2.944 1.28-6.912-1.536-8.832l-24.448-17.152c-2.944-2.048-6.912-1.28-8.832 1.536-2.048 2.816-1.408 6.784 1.536 8.832zM792.576 661.888l27.136 12.672c3.2 1.536 7.04 0.128 8.448-3.072 1.536-3.2 0.128-7.04-3.072-8.448l-27.136-12.672c-3.2-1.536-7.04-0.128-8.448 3.072-1.536 3.2-0.128 6.912 3.072 8.448zM813.44 609.536l28.928 7.68c3.456 0.896 6.912-1.152 7.808-4.48 0.896-3.456-1.152-6.912-4.48-7.808l-28.928-7.68c-3.456-0.896-6.912 1.152-7.808 4.48-0.896 3.456 1.024 6.912 4.48 7.808zM824.832 554.368l29.824 2.56c3.456 0.256 6.656-2.304 6.912-5.76 0.256-3.456-2.304-6.656-5.76-6.912l-29.824-2.56c-3.456-0.256-6.656 2.304-6.912 5.76-0.256 3.584 2.304 6.656 5.76 6.912zM826.624 498.176l29.824-2.56c3.456-0.256 6.144-3.456 5.76-6.912-0.256-3.456-3.456-6.144-6.912-5.76l-29.824 2.56c-3.456 0.256-6.144 3.456-5.76 6.912 0.256 3.456 3.328 6.016 6.912 5.76zM818.432 442.368l28.928-7.68c3.456-0.896 5.376-4.352 4.48-7.808-0.896-3.456-4.352-5.376-7.808-4.48l-28.928 7.68c-3.456 0.896-5.376 4.352-4.48 7.808 0.896 3.456 4.48 5.376 7.808 4.48zM800.768 388.992l27.136-12.672c3.2-1.536 4.608-5.248 3.072-8.448-1.536-3.2-5.248-4.608-8.448-3.072l-27.136 12.672c-3.2 1.536-4.608 5.248-3.072 8.448 1.536 3.072 5.248 4.48 8.448 3.072zM774.144 339.328l24.448-17.152c2.944-2.048 3.584-6.016 1.536-8.832-2.048-2.944-6.016-3.584-8.832-1.536L766.848 328.96c-2.944 2.048-3.584 6.016-1.536 8.832 1.92 2.816 5.888 3.584 8.832 1.536zM697.216 257.664l17.152-24.448c2.048-2.944 1.28-6.912-1.536-8.832-2.944-2.048-6.912-1.28-8.832 1.536l-17.152 24.448c-2.048 2.944-1.28 6.912 1.536 8.832 2.816 2.048 6.784 1.408 8.832-1.536zM658.944 192.512c-3.2-1.536-7.04-0.128-8.448 3.072l-12.672 27.136c-1.536 3.2-0.128 7.04 3.072 8.448 3.2 1.536 7.04 0.128 8.448-3.072l12.672-27.136c1.408-3.2 0-7.04-3.072-8.448zM600.192 170.496c-3.456-0.896-6.912 1.152-7.808 4.48l-7.68 28.928c-0.896 3.456 1.152 6.912 4.48 7.808 3.456 0.896 6.912-1.152 7.808-4.48l7.68-28.928c1.024-3.328-1.024-6.912-4.48-7.808zM534.912 201.6c3.456 0.256 6.656-2.304 6.912-5.76l2.56-29.824c0.256-3.456-2.304-6.656-5.76-6.912-3.456-0.256-6.656 2.304-6.912 5.76l-2.56 29.824c-0.256 3.456 2.304 6.528 5.76 6.912zM476.032 158.464c-3.456 0.256-6.144 3.456-5.76 6.912l2.56 29.824c0.256 3.456 3.456 6.144 6.912 5.76 3.456-0.256 6.144-3.456 5.76-6.912l-2.56-29.824c-0.256-3.456-3.328-6.016-6.912-5.76zM422.144 173.312c-0.896-3.456-4.352-5.376-7.808-4.48-3.456 0.896-5.376 4.352-4.48 7.808l7.68 28.928c0.896 3.456 4.352 5.376 7.808 4.48 3.456-0.896 5.376-4.352 4.48-7.808l-7.68-28.928zM376.448 219.776l-12.672-27.136c-1.536-3.2-5.248-4.608-8.448-3.072-3.2 1.536-4.608 5.248-3.072 8.448L364.8 225.28c1.536 3.2 5.248 4.608 8.448 3.072 3.2-1.536 4.608-5.376 3.2-8.576zM316.416 253.824c2.048 2.944 6.016 3.584 8.832 1.536 2.944-2.048 3.584-6.016 1.536-8.832l-17.152-24.448c-2.048-2.944-6.016-3.584-8.832-1.536-2.944 2.048-3.584 6.016-1.536 8.832l17.152 24.448z" fill="#FFFFFF" p-id="19071"/></svg></div><div class="link_content"><div class="link_title">[图形学笔记]推导投影矩阵</div></div></a>]]></content>
      
      
      
        <tags>
            
            <tag> GAMES101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101个人笔记-光栅化</title>
      <link href="/posts/31310.html"/>
      <url>/posts/31310.html</url>
      
        <content type="html"><![CDATA[<p>屏幕是一个二维数组的标准数据集，是离散的，是一个典型的光栅成像设备</p><h1 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h1><p>光栅化即把图像呈现在屏幕上的过程</p><p><strong>像素</strong>是“最小的”图像单元，一个像素内的颜色，由r，g，b三个参数控制</p><p>由裁剪空间映射到屏幕空间（视口变换）公式如下：<br>$$<br>M_{viewport}&#x3D;<br>\left[\begin{matrix}<br>\frac{width}{2}&amp;0&amp;0&amp;\frac{width}{2}\<br>0&amp;\frac{height}{2}&amp;0&amp;\frac{height}{2}\<br>0&amp;0&amp;1&amp;0\<br>0&amp;0&amp;0&amp;1\<br>\end{matrix}\right]\<br>$$<br>经过矩阵变换后，再把屏幕空间中的多边形打散成三角形，成像到屏幕上，这就是光栅化的大致流程</p><p>计算机生成图像中，最基本的二维元素是三角形</p><p>三角形的特质：① 保证是平面；内外定义清晰；② 具有成熟的顶点插值方法</p><h1 id="不同的光栅化设备"><a href="#不同的光栅化设备" class="headerlink" title="不同的光栅化设备"></a>不同的光栅化设备</h1><p><strong>示波器oscilloscope</strong></p><p><strong>CRT屏幕：</strong></p><p>早期成像原理：阴极射线管</p><p>早期电视：光栅化的CRT屏幕，隔行扫描技术</p><p><strong>当今成像设备：平板显示设备</strong></p><p><strong>LCD液晶显示器：</strong>液晶会通过自己的不同排布，影响光的极化</p><p><strong>LED显示器：</strong>发光二极管点阵列</p><p><strong>电子水墨屏：</strong>电泳成像，刷新频率低</p><p><strong>OLED显示器：</strong>有机发光半导体</p><h1 id="最简单的光栅化方法：采样"><a href="#最简单的光栅化方法：采样" class="headerlink" title="最简单的光栅化方法：采样"></a>最简单的光栅化方法：采样</h1><p>采样，就是把函数离散化的一个过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; imax; i++)</span><br><span class="line">output[i] = f(i);</span><br></pre></td></tr></table></figure><p>为判断该为哪块像素着色，我们定义一个二进制函数：inside(tri,x,y)<br>$$<br>inside(tri,x,y)&#x3D;<br>\left{\begin {array}{rcl}<br>1&amp;point(x,y)\ in\ △t\<br>2&amp;otherwise<br>\end {array}\right.<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; imax; i++)&#123;</span><br><span class="line">for(int j = 0; j &lt; jmax; j++)&#123;</span><br><span class="line">image[i][j] = inside(tri, i+0.5, j+0.5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="采样优化"><a href="#采样优化" class="headerlink" title="采样优化"></a>采样优化</h1><p>Axis-Aligned Bounding Box：包围盒</p><p>在光栅化前先行判断像素点是否在三角形所在包围盒内，若不在，则直接忽略，不进光栅化的循环判断</p><p>Incremental Triangle Traversal：增量三角形遍历</p><p>看似更快，实则实现起来有一定难度，适用于细长的三角形</p><p>采样率不够高 -&gt; 锯齿，走样</p><h1 id="抗锯齿与深度缓冲"><a href="#抗锯齿与深度缓冲" class="headerlink" title="抗锯齿与深度缓冲"></a>抗锯齿与深度缓冲</h1><h2 id="采样伪影"><a href="#采样伪影" class="headerlink" title="采样伪影"></a>采样伪影</h2><p>锯齿（空间采样上的错误）</p><p>摩尔纹（如，采样时跳过奇数行奇数列）</p><p>马车轮效应：人眼在时间上的采样跟不上运动速度</p><p>采样伪影的原因：信号频率太快，采样速度跟不上</p><h2 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h2><p>傅里叶级数展开：任何一个周期函数，都可以表示为一系列sin和cos函数的线性组合加一个常数项的形式</p><p><img src="/posts/31310/college\闫令琪_图形学入门\101\图片\p6-抗锯齿\傅里叶级数变换.png" alt="傅里叶级数变换"></p><p>傅里叶变换，与傅里叶级数展开关系并不大，可以把图像从时域（空间域）变换到频域</p><p><em>用信号处理解释走样：同样一种采样方法，采样两种不同频率的函数，得出的结果无法被区分</em></p><h3 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h3><p>在频域内去除某一特定频率的函数</p><p>高通滤波器，低通滤波器，具体处理过程：</p><p><a href="https://zhuanlan.zhihu.com/p/365546998?utm_source=qq&utm_medium=social&utm_oi=605668290971045888">https://zhuanlan.zhihu.com/p/365546998?utm_source=qq&amp;utm_medium=social&amp;utm_oi=605668290971045888</a></p><p>滤波&#x3D;平均&#x3D;卷积</p><p>卷积核越大，保留的高频信息越少，低频信息越多，对应到频域图上，高频区域的亮度就降低</p><h2 id="走样的本质"><a href="#走样的本质" class="headerlink" title="走样的本质"></a>走样的本质</h2><table><thead><tr><th>采样的本质</th><th>走样的本质</th></tr></thead><tbody><tr><td><img src="/posts/31310/college\闫令琪_图形学入门\101\图片\p6-抗锯齿\采样的本质.png" alt="采样的本质"></td><td><img src="/posts/31310/college\闫令琪_图形学入门\101\图片\p6-抗锯齿\走样的本质.png" alt="走样的本质"></td></tr></tbody></table><p>采样率变低，采样间隔变大，波长变大，频率变小</p><p>Dense sampling&#x3D;&#x3D;稠密采样&#x3D;&#x3D;，图中信号已经首尾相接，意味着当前的采样频率Fs是不发生走样的最低限值</p><p>Sparse sampling&#x3D;&#x3D;稀疏采样&#x3D;&#x3D;，意味着频率Fs变大，间隔变小，就会产生混叠（近视也是因为这种混叠，可以类比一下）</p><p>所以，像素越低，采样率越低，采样频率越小，采样越稀疏，更容易走样</p><h2 id="反走样技术思路"><a href="#反走样技术思路" class="headerlink" title="反走样技术思路"></a>反走样技术思路</h2><p>1、增加屏幕分辨率，增加采样频率（成本高）</p><p>2、在采样之前，进行模糊（&#x2F;滤波）处理，<u>（注意，先模糊处理在采样，反过来是不可行的）</u>，模糊以后，将图像的边界弱化了，采样的时候，该区域对应的像素值可以起到过度缓冲的效果（低通滤波降低信号最高频率，使得可以用更低的采样频率完成采样）</p><p><img src="/posts/31310/college\闫令琪_图形学入门\101\图片\p6-抗锯齿\低通滤波反走样.png" alt="低通滤波反走样"></p><p>先采样后模糊之所以不可行，就是因为波形重叠的情况下截断依然会有重叠</p><p>通过像素做平均（卷积）来达到反走样：</p><p><img src="/posts/31310/college\闫令琪_图形学入门\101\图片\p6-抗锯齿\像素低通滤波.png" alt="像素低通滤波"></p><p>如何计算图形在某一像素内覆盖的比例？</p><p>一种近似方法：&#x3D;&#x3D;MSAA&#x3D;&#x3D;（muti-sample anti-aliasing）</p><p>每个像素多次采样，求平均，像素的颜色值为负责的区域内取样多次颜色值的平均</p><p>MSAA并没有通过物理上增加分辨率达到抗锯齿效果，这些网格只是为了检测覆盖率而已，并且现实应用并非用网格，而是用一些其他图形来达到效果，涉及一些随机数分布（怎样分布样本达到最好的覆盖效果）</p><p>那么，代价是什么？太浪费性能！优化：采样复用</p><p>3、其他抗锯齿方案</p><ul><li>&#x3D;&#x3D;FXAA&#x3D;&#x3D; (Fast Approximate AA)：先获得有锯齿的图，再后处理去除锯齿（很快）<ul><li>找到边界，换成没有锯齿的边界，（图像匹配）非常快</li><li>方法和采样无关，采样虽然有误，但是这种方法可以弥补</li></ul></li><li>&#x3D;&#x3D;TAA&#x3D;&#x3D; (Tem‘poral AA) ：时序信息，借助前面帧的信息<ul><li>最近刚刚兴起</li><li>静态场景，相邻两帧同一像素用不同的位置来sample</li><li>把MSAA的Sampling分布在时间上</li><li>运动情况下怎么办？</li></ul></li></ul><p>Super resolution &#x2F; super sampling 超分辨率</p><p>低分辨率显示器还原高分辨率图片，归根结底依旧是”样本不足“，解决方案举例：DLSS (Deep Learning Super Sampling) </p><h2 id="深度缓存-Zbuffering"><a href="#深度缓存-Zbuffering" class="headerlink" title="深度缓存 -Zbuffering"></a>深度缓存 -Zbuffering</h2><p>Painter’s Algorithm：画家算法，由远及近画画，近处画面覆盖远处画面</p><p>无法处理复杂的深度判断，例如三个三角形互相重叠</p><p>深度计算排序 算法复杂度：$O(log\ n)$</p><p>&#x3D;&#x3D;Z-buffer：对每个像素多存一个深度&#x3D;&#x3D;</p><p>实际编程中，z值越小表示越远，但为方便理解，下述伪代码中z越远越大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(each Triangle T)</span><br><span class="line">for(each sample(x,y,z) in T)</span><br><span class="line">if(z&lt;zbuffer[x,y])</span><br><span class="line">framebuffer[x,y]=rgb;</span><br><span class="line">zbuffer[x,y]=z;</span><br><span class="line">else</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>复杂度：O(n) for n triangles 并不是排序，而是求最值，需要保证三角形进入顺序和结果无关</p><p>tips：无法处理透明物体，详情参考《入门精要》第八章</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101个人笔记-光照、着色、图形管线</title>
      <link href="/posts/11171.html"/>
      <url>/posts/11171.html</url>
      
        <content type="html"><![CDATA[<h3 id="Blinn-Phong光照模型"><a href="#Blinn-Phong光照模型" class="headerlink" title="Blinn-Phong光照模型"></a>Blinn-Phong光照模型</h3><h4 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h4><p>要知道物体表面多亮，就要知道从光源到物体表面发射的能量光是多少，单位的能量光在单位球上的能量表示为 I，同一个点上的能量随着光不断向外传播而逐渐减少， 根据能量守恒定律，每一个球面上的总能量都是相同的（这在之后辐射度量学会有补充）</p><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\漫反射phone模型推导.png" alt="漫反射phone模型推导"></p><p>由此可以得到关系式：<br>$$<br>1^24πI&#x3D;r^24πI’<br>$$<br>再计算物体表面着色点反射多少能量光给摄像机接收</p><p>用一个系数$K_d$表示该着色点的光吸收率，范围是$[0,1]$，如果该系数是 0，证明该着色点完全吸收能量，反之，如果是 1，代表该点完全不吸收能量</p><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\漫反射phone模型.png" alt="漫反射phone模型"></p><p>把这个系数看作是&#x3D;&#x3D;RGB颜色值&#x3D;&#x3D;，当$K_d&#x3D;0$时，此时对应着RGB值是：[0, 0, 0]，在计算机里表示为黑色，黑色正是完全吸收光的颜色，反之，当$K_d&#x3D;1$时，对应着 [255, 255, 255]，在计算机里表示为白色，白色正是完全反射光的颜色</p><p>最终公式为公式：<br>$$<br>L_d&#x3D;k_d(\frac{I}{r^2})max(0,n·l)<br>$$</p><h4 id="镜面反射"><a href="#镜面反射" class="headerlink" title="镜面反射"></a>镜面反射</h4><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\镜面反射phone模型.png" alt="镜面反射phone模型"></p><p> $h$ 为 $l$ 和 $v$ 的半程向量， $n$ 为法线向量， $v$ 为观测角度，</p><p>假设前提：观测向量 $v$ 与镜面反射向量 $R$ 的夹角 与  $n$ 和 $h$ 的夹角相等( $R$ 在图中未标明）</p><p>why：计算机计算 $v$ 与 $R$ 的角度非常麻烦，考虑到大量像素的性能开销，因此使用较简单的半程向量进行计算</p><table><thead><tr><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\指数p的作用.png" alt="指数p的作用"></th><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\对比图.png" alt="对比图"></th></tr></thead></table><p>左图：指数p是为了进一步缩小高光范围所提供的的参数，通常取值大于100</p><p>右图：不同光照强度和p的取值对高光效果的影响</p><h4 id="环境光照"><a href="#环境光照" class="headerlink" title="环境光照"></a>环境光照</h4><p>Blinn-Phone光照模型中，假设从四面八方反射而来的光的光强都是相等的，也就是说可以认为环境光强为一个常数（实际上全局光照的计算要复杂的多），公式为$L_a&#x3D;K_aI_a$</p><h4 id="叠加效果"><a href="#叠加效果" class="headerlink" title="叠加效果"></a>叠加效果</h4><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\三种光照的叠加效果.png" alt="三种光照的叠加效果"></p><h3 id="着色频率"><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h3><h4 id="Flat-Shading（平面着色）"><a href="#Flat-Shading（平面着色）" class="headerlink" title="Flat Shading（平面着色）"></a>Flat Shading（平面着色）</h4><p>以三角面为单位进行着色，对于光滑的几何体效果很差</p><h4 id="Gouraud-Shading（高洛德着色）"><a href="#Gouraud-Shading（高洛德着色）" class="headerlink" title="Gouraud Shading（高洛德着色）"></a>Gouraud Shading（高洛德着色）</h4><p>以顶点为单位进行着色，通过插值计算，实现点与点之间颜色的平滑过渡</p><h4 id="Phone-Shading（冯氏着色）"><a href="#Phone-Shading（冯氏着色）" class="headerlink" title="Phone Shading（冯氏着色）"></a>Phone Shading（冯氏着色）</h4><p>以片元为单位进行着色，对每个点计算一次光照，点的法向量是通过顶点法向量插值得到的，冯氏着色最接近现实，可以在减少三角面数的情况下达到相同的效果（插值后法向量会光滑变化），当然，性能开销也非常大</p><h3 id="图形管线（实时渲染管线）"><a href="#图形管线（实时渲染管线）" class="headerlink" title="图形管线（实时渲染管线）"></a>图形管线（实时渲染管线）</h3><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p8-shading\图形管线.png" alt="图形管线"></p><p>顶点处理 -&gt; 三角形处理 -&gt; 光栅化 -&gt; 片元处理 -&gt; 逐片元操作</p><p>其中，Vertex和Fragment阶段是可编程的</p><p>由于翻译问题，具体可以参考《unity shader入门精要》p9 内容</p><p><strong>GPUs：</strong>可并行的图形管线处理器</p><p>当下的图形实时处理技术可以实时的处理200-400万面的复杂场景数据，并以30-60的帧率动态处理（VR的帧率会更加夸张）</p><h3 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h3><h4 id="Texture-Mapping-纹理映射"><a href="#Texture-Mapping-纹理映射" class="headerlink" title="Texture Mapping 纹理映射"></a>Texture Mapping 纹理映射</h4><p>想要在三维物体的不同表面生成不同的纹理，就需要将三维图形的表面映射至二维表面（展UV）</p><p>三维图形的每个三角面顶点都可以对应一个uv坐标系下的坐标，uv坐标范围约定在$[0,1]$之间</p><p>可复用纹理：纹理本身可以被设计为无缝衔接（tilable）,Wang-Tiling是其中一种方法</p><h4 id="重心坐标"><a href="#重心坐标" class="headerlink" title="重心坐标"></a>重心坐标</h4><p>注意和重心概念的区别！对于三角形所在平面上的任意一点的坐标，都可以用三角形的三个顶点坐标的线性表达式表示<br>$$<br>(x,y)&#x3D;\alpha A+\beta B+\gamma C<br>$$<br>则$(\alpha,\beta,\gamma)$被称为该点的重心坐标，定理：$\alpha+\beta+\gamma&#x3D;1$</p><p>对于三角形内的点，$\alpha,\beta,\gamma&gt;0$，更特殊的情况，三角形&#x3D;&#x3D;重心的重心坐标&#x3D;&#x3D;为$(\frac{1}{3},\frac{1}{3},\frac{1}{3})$</p><p>求$\alpha,\beta,\gamma$公式：<br>$$<br>\alpha &#x3D; \frac{-(x-x_B)(y_C-y_B)+(y-y_B)(x_C-x_B)}<br>              {-(x_A-x_B)(y_C-y_B)+(y_A-y_B)(x_C-x_B)}\<br>\beta &#x3D; \frac{-(x-x_C)(y_A-y_C)+(y-y_C)(x_A-x_C)}<br>              {-(x_B-x_C)(y_A-y_C)+(y_B-y_C)(x_A-x_C)}\<br>\gamma &#x3D; 1-\alpha -\beta<br>$$<br>推导：<a href="https://blog.csdn.net/wangjiangrong/article/details/115326930">https://blog.csdn.net/wangjiangrong/article/details/115326930</a></p><p>几何意义：$(x,y)$与三角形的三个顶点构成三个三角形，顶点&#x3D;&#x3D;所对&#x3D;&#x3D;的三角形的面积与三角形总面积的比值，即为对应的重心坐标值</p><p>利用重心坐标实现线性插值：</p><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p9-shading\重心坐标插值.png" alt="重心坐标插值"></p><p>注意，&#x3D;&#x3D;重心坐标在映射过程中并非保持不变&#x3D;&#x3D;，所以需要在对应时间计算对应的重心坐标来做插值，不能随意复用！</p><p>映射过程伪代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach rasterized screen sample(x,y) //通常来说是一个像素的中心</span><br><span class="line">(u,v) = evaluate texture coordinate at (x,y) //用重心坐标插值</span><br><span class="line">texcolor = texture,sample(u,v);</span><br><span class="line">set sample&#x27;s color to texture; //作为漫反射系数</span><br></pre></td></tr></table></figure><h4 id="纹理过小-or-纹理过大？"><a href="#纹理过小-or-纹理过大？" class="headerlink" title="纹理过小 or. 纹理过大？"></a>纹理过小 or. 纹理过大？</h4><h5 id="纹理太小"><a href="#纹理太小" class="headerlink" title="纹理太小"></a>纹理太小</h5><p>可以理解为多个pixel映射到了同一个texel</p><p>解决方案：</p><p>1、水平+竖直做两次插值，即&#x3D;&#x3D;双线性插值&#x3D;&#x3D; Lerp</p><p>2、对周围16个点做三次插值，&#x3D;&#x3D;双三次插值&#x3D;&#x3D; Bicubic，运算量更大，结果更好</p><h5 id="纹理太大"><a href="#纹理太大" class="headerlink" title="纹理太大"></a>纹理太大</h5><p>可以理解为一个pixel对应了多个纹素，因采样频率不足而导致摩尔纹+锯齿（走样）</p><p>解决方案：</p><p>Supersampling多重采样，性能开销过大，所以干脆舍弃超级采样的思路</p><p>&#x3D;&#x3D;Mipmap算法：&#x3D;&#x3D;</p><p>事先准备多张不同级别（D）的纹理贴图，每升一个级别，横纵纹素各减小一半，最后显存消耗仅为原来的$\frac{4}{3}$，如此分级之后，设屏幕空间下采样像素与相邻像素中心点之间的距离为L，在u-v坐标系找到这些像素的中心点对应的坐标，求出L在u-v坐标系下对应的纹素数量，做对数运算求得对应像素的纹理细节的级别，再以对应级别做&#x3D;&#x3D;双线性插值&#x3D;&#x3D;</p><p>由于这种方法中，D是整数，而并非连续的值，为了得到连续的效果，在做对数运算后对小数部分算一下权重，并取向下取整的D值与D+1两个级别，对着两个级别分别做一次双线性插值，最后对插值结果再进行一次插值，我们称这种方法为&#x3D;&#x3D;三线性插值&#x3D;&#x3D;</p><table><thead><tr><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p9-shading\求L.png" alt="求L"></th><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p9-shading\三线性插值.png" alt="三线性插值"></th></tr></thead></table><p><strong>MipMap算法的局限</strong>：只能在u-v坐标系下做方块查询，有时候会造成过度模糊的情况</p><p>为了避免这种情况，引入&#x3D;&#x3D;各向异性过滤&#x3D;&#x3D;，在准备不同级别的纹理贴图时，不再是简简单单横纵纹素各减小一半进行分级，而是长减半宽不变 or 宽减半长不变 or 长和宽各减半三种情况各进行一次分级，显存消耗为原来的三倍，但性能方面并没有多少影响，这种方法就可以实现在u-v坐标系下进行矩形查询。</p><p>比各向异性更进一步的过滤，如EWA filtering 椭圆取样，则利用多次查询求平均值的方法来处理不规则区域，相应的性能开销就会比较大了</p><p>由上可知，在显存足够的情况下，各向异性过滤级别开越高越好</p><p>这块内容显然特别抽象，具体细节可以参考：</p><p><a href="https://zhuanlan.zhihu.com/p/144332091?utm_source=qq&utm_medium=social&utm_oi=605668290971045888">https://zhuanlan.zhihu.com/p/144332091?utm_source=qq&amp;utm_medium=social&amp;utm_oi=605668290971045888</a></p><h4 id="各种纹理贴图"><a href="#各种纹理贴图" class="headerlink" title="各种纹理贴图"></a>各种纹理贴图</h4><h5 id="环境光贴图"><a href="#环境光贴图" class="headerlink" title="环境光贴图"></a>环境光贴图</h5><p>假设光源无限远，只记录光照的方向信息，这种贴图被称作环境光贴图</p><p>e.g. Utah Teaport 犹他茶壶；Stanford Bunny 斯坦福兔子</p><ul><li><p>球面环境映射 Spherical Environment Map</p><p>球心为世界中心。类比地球仪展开铺平，存在纹理的拉升扭曲问题，解决方法：Cube Map</p></li><li><p>立方体贴图 Cube Map</p><p>将环境光照信息记录在一个立方体表面上，但会需要额外判断某一方向上的光照应该记录在立方体的哪个面上，计算量更大</p></li></ul><h5 id="凹凸贴图"><a href="#凹凸贴图" class="headerlink" title="凹凸贴图"></a>凹凸贴图</h5><p>记录了纹理的高度移动，并不改变原来模型的几何信息，通过法线扰动，得到模拟出来的着色效果，以假乱真</p><p><strong>计算法线的方法：</strong></p><table><thead><tr><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\计算法线方向1.png" alt="计算法线方向1"></th><th><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\计算法线方向2.png" alt="计算法线方向2"></th></tr></thead></table><p><strong>UV下的法线算法：</strong></p><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\UV下的法线算法.png" alt="UV下的法线算法"></p><p>局部坐标下，$n&#x3D;(-\frac{dp}{du},-\frac{dp}{dv},1).normalized$</p><h5 id="置换贴图"><a href="#置换贴图" class="headerlink" title="置换贴图"></a>置换贴图</h5><p>与凹凸贴图类似，但置换贴图是真的改变了几何信息，去对模型的顶点做位移，会比凹凸贴图更加逼真，但对模型的精度（三角面数量）要求更高，并且运算量也会随之上升</p><p>DirectX有Dynamic的插值法，根据需要对模型做插值，看情况决定模型的细致程度</p><p>凹凸贴图vs.置换贴图：</p><p><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\凹凸贴图vs.位移贴图.png" alt="凹凸贴图vs.位移贴图"></p><h5 id="程序纹理"><a href="#程序纹理" class="headerlink" title="程序纹理"></a>程序纹理</h5><p>三维的纹理，并非真正生成了纹理的图，而是定义空间中任意点的颜色</p><p>定义三维空间中的噪声函数，再通过映射，得到预想的效果</p><h5 id="预计算着色"><a href="#预计算着色" class="headerlink" title="预计算着色"></a>预计算着色</h5><p>将环境光进行预计算处理，再附在原先纹理上做一层遮蔽，再将纹理贴到模型上</p><h5 id="三维渲染"><a href="#三维渲染" class="headerlink" title="三维渲染"></a>三维渲染</h5><p>Solid Modeling &amp;. Volume Rendering</p><p>广泛应用于物体渲染，如核磁共振等扫描后得到的体积信息，通过这些信息进行渲染，得到结果</p><table><thead><tr><th>程序纹理</th><th>预计算着色</th><th>三维渲染</th></tr></thead><tbody><tr><td><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\程序纹理.png" alt="程序纹理"></td><td><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\预计算着色.png" alt="预计算着色"></td><td><img src="/posts/11171/college\闫令琪_图形学入门\101\图片\p10-几何1\三维渲染.png" alt="三维渲染"></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101个人笔记-几何</title>
      <link href="/posts/23425.html"/>
      <url>/posts/23425.html</url>
      
        <content type="html"><![CDATA[<h2 id="五、几何"><a href="#五、几何" class="headerlink" title="五、几何"></a>五、几何</h2><h3 id="几何的表达方式"><a href="#几何的表达方式" class="headerlink" title="几何的表达方式"></a>几何的表达方式</h3><h4 id="隐式几何"><a href="#隐式几何" class="headerlink" title="隐式几何"></a>隐式几何</h4><p>用空间中的满足一定条件的点的集合来表示面，隐式几何不会表示点的具体位置信息，而是告诉我们这些点满足的函数关系</p><p>我们很难看出隐式想表达的形状是什么，但对于判断点的位置关系（在内，在外还是在表面）会很方便</p><ul><li><p><strong>代数曲面</strong></p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\代数几何.png" alt="代数几何"></p></li><li><p><strong>CSG构造实体几何</strong></p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\CSG构造实体几何.png" alt="CSG构造实体几何"></p></li><li><p><strong>※ 距离函数</strong></p><p>对于任意一个几何，不直接描述其表面，而是描述空间中任意一点到这个表面的距离，如此一来空间中所有点都会被定义出一个距离值，把距离函数做出来，在做个belnding就可以达到融合效果</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\距离函数2.png" alt="距离函数2"></p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\距离函数1.png" alt="距离函数1"></p><p>距离函数应用：SDF</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\SDF.png" alt="SDF"></p><p>得到距离函数后，函数值为0的地方就是表面。类似的，水平集也用了同样的思想，在地理上类似定义是等高线，用等高线的思想确定表面位置</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\水平集.png" alt="水平集"></p><p>水平集应用：CT扫描</p></li><li><p><strong>分形几何</strong></p><p>自相似，递归，很难控制形状</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p10-几何1\分形几何.png" alt="分形几何"></p></li></ul><h4 id="显式几何"><a href="#显式几何" class="headerlink" title="显式几何"></a>显式几何</h4><p>直接给出点的位置，或者可以进行参数映射；然而想要判断内外时，显式的表达就很难进行表示</p><p><strong>点云</strong></p><p>用空间中一堆点的集合来表示物体，只要点足够密集，就看不到点与点之间的空隙，理论上可以表示任何几何，通常三维扫描得到的结果就是点云（点云可以转变为三角形）</p><p><strong>多边形网格</strong></p><p>或许是目前最为广为流传的三维几何表达方式</p><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><p>德卡斯特里奥（de Casteljau）算法  生成<u>二次贝塞尔曲线</u></p><p>定义三个点 -&gt; 根据任意的 t 插值出点 -&gt; 不断重复 t在[0,1]间不断取值 -&gt; 得到曲线</p><p>![贝塞尔曲线 (3)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线 (3).png)</p><p><u>二次贝塞尔曲线</u>：<strong>递归</strong></p><table><thead><tr><th>![贝塞尔曲线 (2)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线 (2).png)</th><th>![贝塞尔曲线 (1)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线 (1).png)</th></tr></thead></table><h4 id="贝塞尔曲线的代数表示"><a href="#贝塞尔曲线的代数表示" class="headerlink" title="贝塞尔曲线的代数表示"></a>贝塞尔曲线的代数表示</h4><p>在每两个之间找一个时间t，相当于每两个之间线性插值</p><p>![贝塞尔曲线的代数表示 (2)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线的代数表示 (2).png)</p><p>把算法过程写成代数的形式（如图）</p><p>![贝塞尔曲线的代数表示 (4)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线的代数表示 (4).png)</p><p>推广到n阶，不难发现这其实是一个符合二项分布的多项式</p><p>![贝塞尔曲线的代数表示 (1)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线的代数表示 (1).png)</p><p>三次贝塞尔曲线的代数表示：</p><p>![贝塞尔曲线的代数表示 (3)](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲线的代数表示 (3).png)</p><h4 id="贝塞尔曲线的性质"><a href="#贝塞尔曲线的性质" class="headerlink" title="贝塞尔曲线的性质"></a>贝塞尔曲线的性质</h4><ul><li>对称性：第 $i$ 项系数和倒数第 $i$ 项系数相同</li><li>必过起点终点，起始切线方向为前两个点连接的方向，终止切线方向为结尾两个点连接的方向</li><li>在仿射变换下，只需要对顶点做仿射变换，就能得到这个贝塞尔曲线在仿射变换下的结果</li><li>凸包性质：贝塞尔曲线始终会在<strong>包含了所有控制点的最小凸多边形</strong>中, 而不是按照控制点的顺序围成的最小多边形</li></ul><h4 id="逐段贝塞尔曲线"><a href="#逐段贝塞尔曲线" class="headerlink" title="逐段贝塞尔曲线"></a>逐段贝塞尔曲线</h4><p>控制点多了以后，贝塞尔曲线并不直观，很难控制，于是我们想到可以每次定义一段贝塞尔曲线，然后连起来</p><p>普遍习惯每四个控制点定义一段，并略去中间两点间的连线</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p11-几何2\逐段贝塞尔曲线.png" alt="逐段贝塞尔曲线"></p><h4 id="连续性"><a href="#连续性" class="headerlink" title="连续性"></a>连续性</h4><table><thead><tr><th>$C_0$连续：点相同</th><th>$C_1$连续：切线相同</th></tr></thead><tbody><tr><td><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p11-几何2\c0连续.png" alt="c0连续"></td><td><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p11-几何2\c1连续.png" alt="c1连续"></td></tr></tbody></table><h4 id="样条曲线"><a href="#样条曲线" class="headerlink" title="样条曲线"></a>样条曲线</h4><p><strong>样条</strong>：连续的曲线，由一系列控制点控制，满足一定的连续性，即可控的曲线</p><p><strong>B样条曲线</strong>有关信息可以参考：</p><p><a href="https://zhuanlan.zhihu.com/p/50626506">https://zhuanlan.zhihu.com/p/50626506</a></p><p><a href="https://www.bilibili.com/video/BV13441127CH?p=13">https://www.bilibili.com/video/BV13441127CH?p=13</a> 胡事民老师的课</p><h3 id="曲面"><a href="#曲面" class="headerlink" title="曲面"></a>曲面</h3><h4 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h4><p>u方向上画出四条贝塞尔曲线后，在这四个线上再取四个点，并认为这是个点是一组新的贝塞尔曲线的控制点，这些点在空间内向v方向扫描，便形成了贝塞尔曲面</p><p><img src="/posts/23425/college\闫令琪_图形学入门\101\图片\p11-几何2\贝塞尔曲面.gif" alt="贝塞尔曲面"></p><h3 id="几何处理"><a href="#几何处理" class="headerlink" title="几何处理"></a>几何处理</h3><h4 id="曲面细分"><a href="#曲面细分" class="headerlink" title="曲面细分"></a>曲面细分</h4><h5 id="Loop细分（涡轮平滑）"><a href="#Loop细分（涡轮平滑）" class="headerlink" title="Loop细分（涡轮平滑）"></a>Loop细分（涡轮平滑）</h5><p>连接各边中点，并重新改变各个顶点位置，从而创造出更多三角形面，使得表面更加光滑（命名并不是因为算法与循环有关，而是该算法创始人的名字叫loop）</p><p><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/loop%E7%BB%86%E5%88%86.png" alt="loop细分"></p><p>该算法规定，一般情况下（不考虑边缘情况），对于新顶点，位置由下左图规定，而对于旧顶点，需要由旧顶点和新顶点位置共同确定</p><p>下右图中，n为该顶点的度（依附于某个顶点的边的条数），u为一个和n有关的数</p><table><thead><tr><th>新顶点</th><th>旧顶点</th></tr></thead><tbody><tr><td><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/loop%E7%BB%86%E5%88%86%E6%96%B0%E9%A1%B6%E7%82%B9%E4%BD%8D%E7%BD%AE.png" alt="loop细分新顶点位置"></td><td><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/loop%E7%BB%86%E5%88%86%E6%97%A7%E9%A1%B6%E7%82%B9%E4%BD%8D%E7%BD%AE%E8%B0%83%E6%95%B4.png" alt="loop细分旧顶点位置调整"></td></tr></tbody></table><h5 id="Catmull-Clark-细分"><a href="#Catmull-Clark-细分" class="headerlink" title="Catmull-Clark 细分"></a>Catmull-Clark 细分</h5><p>loop细分有一个前提，即只适用于三角形网格，而对于非三角形网格的细分，就需要借助catmull-clark算法</p><p>该算法定义面分为两种——四边面和非四边面，并定义度为4的顶点为非奇异点，其余点均为奇异点</p><p><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/catmull%EF%BC%881%EF%BC%89.png" alt="catmull（1）"></p><p>具体做法是，对每个非四边面都取其中的一个点（重心或者其他点），将其与该面的其他顶点分别连接，在这个过程中，会引入一个新的奇异点，并且在一次细分后，所有非四边面都变为了四边面，在后续的细分中，将不会引入新的奇异点</p><table><thead><tr><th><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/catmull%EF%BC%882%EF%BC%89.png" alt="catmull（2）"></th><th><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/catmull%EF%BC%883%EF%BC%89.png" alt="catmull（3）"></th></tr></thead></table><p>对于细分后顶点位置的调整，先将顶点分为三大类</p><p>①新的在面上的点；②新的在边上的点；③旧的点</p><p>如下计算：</p><p><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/catmull%E9%A1%B6%E7%82%B9%E4%BD%8D%E7%BD%AE%E8%B0%83%E6%95%B4.png" alt="catmull顶点位置调整"></p><p>loop细分与catmull-clark细分不同的处理效果：</p><p><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/loop%E4%B8%8Ecatmull%E5%AF%B9%E6%AF%94.png" alt="loop与catmull对比"></p><p>具体推导过程可以参考：</p><p><a href="https://blog.csdn.net/McQueen_LT/article/details/106102609">https://blog.csdn.net/McQueen_LT/article/details/106102609</a></p><h4 id="网格简化"><a href="#网格简化" class="headerlink" title="网格简化"></a>网格简化</h4><h5 id="边坍缩"><a href="#边坍缩" class="headerlink" title="边坍缩"></a>边坍缩</h5><p>如何保证坍缩前后轮廓基本保持一致？——二次误差</p><p>二次误差度量：坍缩后的点和原本几个边（面）的距离的平方和最小</p><table><thead><tr><th><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/%E4%BA%8C%E6%AC%A1%E8%AF%AF%E5%B7%AE%E5%BA%A6%E9%87%8F.png" alt="二次误差度量"></th><th><img src="/posts/23425/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p12-%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/%E4%BA%8C%E6%AC%A1%E8%AF%AF%E5%B7%AE%E5%BA%A6%E9%87%8F2.png" alt="二次误差度量2"></th></tr></thead></table><p>对每一条边都先计算一下二次误差，随后从二次误差最小的开始坍缩，由小到大</p><p>但这么做会引入一些问题：做一次坍缩后，其他边也跟着变了，他们的二次误差必须被重新计算</p><p>所以需要从二次度量误差中选最小的，取完最小的之后，我们要对它们的二次误差做一次更新，于是我们就要用到&#x3D;&#x3D;优先队列 &#x2F; 堆&#x3D;&#x3D;这种数据结构，这种数据结构能让我们能取得二次误差最小值的同时也能动态更新其他受影响的元素</p><p>另外，这种通过对局部计算最优解，试图找到全局的最优解，是一个典型的贪心算法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101个人笔记-光线追踪</title>
      <link href="/posts/8491.html"/>
      <url>/posts/8491.html</url>
      
        <content type="html"><![CDATA[<h2 id="六、光线追踪"><a href="#六、光线追踪" class="headerlink" title="六、光线追踪"></a>六、光线追踪</h2><p>光栅化的着色是一种局部的现象，在其着色的过程中只会考虑着色点自己的信息，而不会考虑其他物体，甚至不会考虑物资自身的其他部分对着色点的影响。事实上这些都是会有遮挡的关系的，是会产生阴影的，为了解决这个问题，就有了光线追踪</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="Shadow-Mapping-阴影贴图"><a href="#Shadow-Mapping-阴影贴图" class="headerlink" title="Shadow Mapping 阴影贴图"></a>Shadow Mapping 阴影贴图</h4><p>核心思想：如果一个点不在阴影里，那么这个点可以被摄像机和光源都看到</p><p>局限：硬阴影，走样，只能处理点光源</p><p>具体实现细节：</p><p>① 先从光源看向场景，做一遍光栅化，不进行着色，只记录深度</p><p>② 再从摄像机看向场景，再做一遍光栅化，记录深度</p><p>③ 比较两次深度值，如果不相等，则说明该点在阴影中</p><p><strong>问题1</strong>：渲染出来的阴影比较脏</p><p><strong>原因</strong>：深度值的比较位浮点数比较，而判断浮点数相等势必会产生误差，虽然处理精度的方法有很多种，但并不能从本质上解决问题</p><p><strong>问题2</strong>：走样</p><p><strong>原因</strong>：本身储存的深度图存在分辨率限制，与渲染时的分辨率搭配不好的话，就会产生走样</p><p>![Shadow Mapping浮点误差](F:-STUDY-\college\闫令琪_图形学入门\101\图片\p13-光线追踪\Shadow Mapping浮点误差.png)</p><p>关于硬软阴影：本质是本影和半影的问题，只要存在软阴影，那么光源一定具有一定的体积</p><h4 id="Why-Ray-Tracing？"><a href="#Why-Ray-Tracing？" class="headerlink" title="Why Ray-Tracing？"></a>Why Ray-Tracing？</h4><p>由上可知，光栅化并做不好全局的效果，如软阴影，反射，环境光照</p><p>光栅化很快速，但渲染的质量不高；光线追踪的处理速度慢，但渲染的很准确</p><p>光栅化很容易做到实时，而光线追踪更多的应用于离线渲染（现在的实时光线追踪，这位更是重量级！）</p><p>首先定义光线——沿直线传播，不会发生碰撞，从光源到人眼</p><p>由光路的可逆性，在光线追踪的具体应用中，采用从人眼（认为是一个针孔摄像机）到光源的方法</p><p><strong>光线投射</strong>：人眼，成像平面，光源，物体</p><p><img src="/posts/8491/college\闫令琪_图形学入门\101\图片\p13-光线追踪\光线投射.png" alt="光线投射"></p><p><u>从相机出发投射一条光线</u>，穿过成像平面，与着色点相连，如果光源能看见着色点（着色点不在阴影中），那么就生成一条有效光路，计算能量并着色（我们很容易知道这个着色点的法线，入射方向等信息，这时候可以用各种各样的着色模型（如Blinn Phong））</p><p>对于场景中的物体，我们假设光打到它之后会发生完美的折射与反射，而对于着色点，我们取光路与物体最近的交点（涉及深度测试）</p><p>总的来说，光线投射其实就是每个像素投射出去一条光线，求到和场景内物体的最近交点，通过该交点和光源连线来判定是否可见，然后算着色，写回像素的值</p><p>这个方法依旧只是弹射一次，但事实上光线是能在物体间弹射很多次，这时候就需要用到whitted光线追踪</p><h3 id="Whitted（递归）风格光线追踪"><a href="#Whitted（递归）风格光线追踪" class="headerlink" title="Whitted（递归）风格光线追踪"></a>Whitted（递归）风格光线追踪</h3><p><img src="/posts/8491/college\闫令琪_图形学入门\101\图片\p13-光线追踪\whitted光线追踪.png" alt="whitted光线追踪"></p><p>如果图中的球是玻璃材质，那么之前从像素投射出去的光线，除了会在玻璃球表面发生发射，还有一部分会进入玻璃球发生折射，而whitted光线追踪，除了计算第一次光线投射的着色点外，对每个弹射点也进行了着色计算（损失多少能量，颜色值等）</p><h3 id="光线与物体求交"><a href="#光线与物体求交" class="headerlink" title="光线与物体求交"></a>光线与物体求交</h3><p>无论是之前的光线投射还是whitted风格光线追踪，都涉及到光线与物体求交问题</p><p>为了研究这个问题，我们需要先定义光线</p><p>一个光线可以有一个点（光源）和一个方向（光线方向）确定，则可设光线表达式：$r(t)&#x3D;O+td$</p><h4 id="和隐式表面求交"><a href="#和隐式表面求交" class="headerlink" title="和隐式表面求交"></a>和隐式表面求交</h4><p>光线在t时间后到达的着色点：$r(t)&#x3D;O+td$</p><p>隐式表面：$f(p)&#x3D;0$<code> //p是着色点</code></p><p>将$r(t)$代入，$f(r(t))&#x3D;f(O+td)&#x3D;0$</p><p>要判断是否与隐式表面相交，只要判断上面这个方程是否有解即可</p><p><img src="/posts/8491/college\闫令琪_图形学入门\101\图片\p13-光线追踪\与隐式表面求交.png" alt="与隐式表面求交"></p><h4 id="和显式表面求交"><a href="#和显式表面求交" class="headerlink" title="和显式表面求交"></a>和显式表面求交</h4><p>核心：点如果在封闭形状内，向外打一条光线，得到的交点数量一定是奇数；如果在封闭形状外，则交点数一定是偶数</p><p>那么对于显示表面求交，最简单的做法就是遍历物体的所有三角形面，求交点数量，那么问题就简化为如何判断光线与三角形面求交（这种方法很慢，之后会提到包围盒的加速算法）</p><h4 id="与三角面求交"><a href="#与三角面求交" class="headerlink" title="与三角面求交"></a>与三角面求交</h4><p>平面可以由一个点和一个法线定义，三角面也不例外，在求交问题中，设光线和三角面交点位p，p满足：$(p-p’)·N&#x3D;0$</p><p>复杂的做法是，将光线方程带入三角面方程，求得交点（下图），在用向量积判断交点是否在三角面内</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p13-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/%E4%B8%8E%E6%98%BE%E5%BC%8F%E8%A1%A8%E9%9D%A2%E6%B1%82%E4%BA%A4%EF%BC%881%EF%BC%89.png" alt="与显式表面求交（1）"></p><p>简便的做法，把求交点和判断这两步并作一步，即Möller-Trumbore算法</p><h4 id="Moller-Trumbore算法"><a href="#Moller-Trumbore算法" class="headerlink" title="Möller-Trumbore算法"></a>Möller-Trumbore算法</h4><p>如下图，左边是光线上的点，右边是用重心坐标表示的三角形内的点</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p13-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/M%C3%B6ller-Trumbore%E7%AE%97%E6%B3%95.png" alt="Möller-Trumbore算法"></p><p>解出来之后要判断是否合理， $t&gt;0？\ \ \ b_1,b_2,b_3&gt;0？$</p><p>算法推导：</p><p><a href="https://blog.csdn.net/zhanxi1992/article/details/109903792">https://blog.csdn.net/zhanxi1992/article/details/109903792</a></p><h4 id="轴对齐包围盒（AABB）求交"><a href="#轴对齐包围盒（AABB）求交" class="headerlink" title="轴对齐包围盒（AABB）求交"></a>轴对齐包围盒（AABB）求交</h4><p>上述算法的计算次数： 像素数×三角形数×弹射次数</p><p>显然，对每一帧来说，这样的计算量是非常大的，所以我们需要引入包围盒，将一个复杂的物体用简单的形状围起来</p><p>那么如果光线连包围盒都碰不到，那肯定碰不到包围盒里的物体</p><p>对于三维的情况，我们一般用长方体包围盒，更特殊的，轴对齐包围盒，即包围盒的每一个边都对应和一个坐标轴平行</p><p>接着就来考虑光线和包围盒求交的问题</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p13-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/AABB%E5%8C%85%E5%9B%B4%E7%9B%92.png" alt="AABB包围盒"></p><p>只有当光线进入了三组对面，才能说明光线进入了包围盒，同理，当光线在三组对面外，才可知光线离开了包围盒</p><p>如上图，取$t_{min}$里的max，作为进入包围盒的时间，取$t_{max}$里的min，作为离开包围盒的时间</p><p>若进入包围盒的时间小于离开包围盒的时间，说明有交点</p><p><strong>几个问题</strong>：光线是射线，如果t是负数，那说明交点在射线的反向延长线上，这是不合理的，下面做分类讨论：</p><ul><li>盒子在光线背后：${t_{enter}}&lt;0,t_{output}&lt;0$</li><li>光线起点在盒子内部：$t_{enter}&lt;0,t_{output}&gt;0$</li></ul><p>综上，$iff\ \ \ t_{enter}&lt;t_{output}且t_{output}&gt;0$，此时才能证明光线和包围盒有交点</p><p>why AABB？为什么使用轴对称包围盒？</p><p>因为轴对齐的情况下，我们可以在求t的时候只求某一轴的信息（光线在轴上的投影），而不用整个坐标，比点乘计算会更加容易</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p13-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E8%BD%B4%E5%AF%B9%E7%A7%B0%E5%8C%85%E5%9B%B4%E7%9B%92.png" alt="为什么使用轴对称包围盒"></p><h4 id="使用轴对齐包围盒加速光线追踪"><a href="#使用轴对齐包围盒加速光线追踪" class="headerlink" title="使用轴对齐包围盒加速光线追踪"></a>使用轴对齐包围盒加速光线追踪</h4><p>通过上述分析，我们已经知道了光线如何和包围盒求交，那么又要怎么在空间中确定这些包围盒的位置呢</p><p>（需要注意，以下对空间的划分都是光线追踪的预处理操作）</p><h5 id="均匀划分"><a href="#均匀划分" class="headerlink" title="均匀划分"></a>均匀划分</h5><p>假设光线与物体求交比光线与包围盒求交慢的多，那么我们需要对包围盒进行进一步加工</p><p>均匀划分的步骤如下：</p><p>找到场景包围盒 -&gt; 均匀划分该包围盒 -&gt; 判定与物体相交的子包围盒 -&gt; 与物体求交</p><p>如果一条光线向右上投射出去，为了确定这条光线与哪些子包围盒相交，简单的想法是他下一次交到的包围盒在他当前交到的右边或上边（如何光栅化一条线）</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E5%9D%87%E5%8C%80%E5%88%92%E5%88%86%E7%A9%BA%E9%97%B4%E6%AD%A5%E9%AA%A4.png" alt="均匀划分空间步骤"></p><p>所谓加速就是多做光线与盒子求交，少做光线与物体求交，那么我们来看一下均匀划分的加速效果</p><table><thead><tr><th><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E5%9D%87%E5%8C%80%E5%88%92%E5%88%86%E7%9A%84%E5%A4%AA%E5%B0%91.png" alt="均匀划分的太少"></th><th><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E5%9D%87%E5%8C%80%E5%88%92%E5%88%86%E7%9A%84%E5%A4%AA%E5%A4%9A.png" alt="均匀划分的太多"></th></tr></thead></table><p>如果划分成1×1的格子，则没有加速效果；如果划分太密集，效率也不会高</p><p>根据经验，人们大概得出划分成场景中物体数目的27倍的格子数比较好</p><p>&#x3D;&#x3D;格子的划分方法在大量均匀分布的物体上比较有效，然而在复杂空旷的场景中，会造成很多资源浪费&#x3D;&#x3D;</p><h5 id="空间划分"><a href="#空间划分" class="headerlink" title="空间划分"></a>空间划分</h5><p>在网格均匀划分中划分出来的都是大小相同的格子，但在有些空旷的地方不需要这样划分，太浪费了，我们想在没物体的地方用大盒子，有物体的地方用密集的盒子，这也就引出了空间划分的方法</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86.png" alt="空间划分"></p><h6 id="八叉树"><a href="#八叉树" class="headerlink" title="八叉树"></a>八叉树</h6><p>每一次把空间划分成八份，直到满足一定的停止规则（比如某一次划分8个子空间中7个为空）</p><p><u>缺点：维数越高越复杂，n维空间对应$2^n$叉树</u></p><h6 id="BSP树"><a href="#BSP树" class="headerlink" title="BSP树"></a><strong>BSP树</strong></h6><p>一种对空间二分的划分方法，每次选一个方向进行划分，与KD树的区别在于它不是横平竖直地切，且它会有越高维越不好计算的问题（砍开二维用线，砍开三维用面，维度越高越复杂）</p><h6 id="KD树"><a href="#KD树" class="headerlink" title="KD树"></a>KD树</h6><p>每次把空间划分为两份，x，y，z轴轮流切分，直到被切分节点中不存在物体则停止</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/KD%E6%A0%91.png" alt="KD树"></p><p><u>KD树如何加速光线追踪：</u></p><p>如图，如果一条光线与当前结点空间有交点，则继续寻找该结点的子节点，直到找到叶子结点，再与其中物体求交</p><p><u>缺点：</u></p><p>给出一个节点的包围盒，要判断他与物体哪些三角形有交集，才能进行后续着色，这种算法确实存在，但不太好写</p><p>其次，很多情况下一个物体和很多包围盒都有交集，它可能会存在很多个叶子节点中，会造成重复计算</p><p>由此我们引入另一种基于物体的划分方式——BVHs</p><h5 id="BVHs划分"><a href="#BVHs划分" class="headerlink" title="BVHs划分"></a>BVHs划分</h5><p>Bounding Volume Hierarchy</p><p>找到场景包围盒 -&gt; 每次将物体分为两堆 -&gt; 对两堆物体重新计算包围盒 -&gt; 直到一堆中物体少到一定程度</p><p>如何划分物体：</p><p>1°选取当前最长的轴的垂直方向作为划分方向</p><p>2°取中间的物体（第$\frac{n}{2}$个三角形）（快速选择算法）</p><p>1°或2°都可以，主要是为了保证二叉树的平衡（平衡二叉树？）</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/BVHs.png" alt="BVHs"></p><p>BVH这种储存结构，中间结点储存包围盒和子节点的指针，叶子结点储存包围盒和物体（的集合）</p><p>关于BVH如何加速光线追踪，可以参考下述伪代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Intersect(Ray ray,BVH node)</span><br><span class="line">&#123;</span><br><span class="line">if(node is a leaf node)</span><br><span class="line">&#123;</span><br><span class="line">test intersection with all objs;</span><br><span class="line">return closest intersection;</span><br><span class="line">&#125;</span><br><span class="line">hit1 = Intersect(ray , node.child1);</span><br><span class="line">hit2 = Intersect(ray , node.child2);</span><br><span class="line"></span><br><span class="line">return the closer of hit1,hit2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BVHs-vs-KD"><a href="#BVHs-vs-KD" class="headerlink" title="BVHs vs. KD"></a>BVHs vs. KD</h5><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/BVH%20vs.%20KD.png" alt="BVH vs. KD"></p><p>一个是对空间的划分，一个是基于物体的划分；KD树的包围盒不会发生重合，而BVHs会发生相交</p><h3 id="辐射度量学基础"><a href="#辐射度量学基础" class="headerlink" title="辐射度量学基础"></a>辐射度量学基础</h3><p>why：</p><p>Blinn-Phong着色模型中会设置一个数当做光照强度，但我们都不清楚这个数的真实的物理意义，甚至连单位是什么也不知道，研究过程中我们只是将这些物理量简化为一个数，另外Whitted风格的光线追踪所得到的结果也不是我们所想要的真实的效果（路径追踪会提到），而所有的这些都会被辐射度量学解决，这同样也是后面学习路径追踪的基础</p><p>辐射度量学给出了一系列度量方法和单位去定义光照，它定义了光照在空间中的属性，并且这在物理上是完全正确的</p><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><table><thead><tr><th align="center">物理量</th><th align="center">符号</th><th align="center">中文翻译</th><th align="center">简单定义</th><th align="center">单位</th><th align="center">公式</th></tr></thead><tbody><tr><td align="center">Radiant Energy</td><td align="center">Q</td><td align="center">辐射能量</td><td align="center">电磁波形式的能量</td><td align="center">焦耳（J）</td><td align="center">\</td></tr><tr><td align="center">Radiant Flux</td><td align="center">P</td><td align="center">辐射功率&#x2F;辐射通量</td><td align="center">单位时间内的辐射能量</td><td align="center">瓦特（w）</td><td align="center">$P&#x3D;\frac{dQ}{dt}$</td></tr><tr><td align="center">Radiant Intensity</td><td align="center">I</td><td align="center">辐射强度</td><td align="center">点源向某单位立体角发射的辐射功率</td><td align="center">w&#x2F;sr</td><td align="center">$I&#x3D;\frac{dP}{d\omega}$</td></tr><tr><td align="center">Irradiance</td><td align="center">E</td><td align="center">辐（射）照度</td><td align="center">受照面单位面积上的辐射功率</td><td align="center">w$&#x2F;m^2$</td><td align="center">$E&#x3D;\frac{dP}{dA}$</td></tr><tr><td align="center">Radiance</td><td align="center">L</td><td align="center">辐（射）亮度</td><td align="center">单位投影面积、单位立体角上的辐射功率</td><td align="center">w$&#x2F;m^2$sr</td><td align="center">$L&#x3D;\frac{d^2P}{dAd\omega cos(\theta)}$</td></tr></tbody></table><p>光学中辐射强度的单位：$\frac{W}{sr}&#x3D;\frac{lm}{sr}&#x3D;candela&#x3D;cd$</p><p>$\Omega&#x2F;\omega$：立体角；$A$：受照面面积</p><p>sr：球面度，立体角国际单位</p><p>lm：流明，光通量国际单位</p><p>cd：坎德拉，光强单位，SI 7大基本单位之一</p><p>光通量和辐射通量：</p><p>光通量与辐射通量的量纲相同，但辐射通量是一个辐射度量学上的概念，是一个描述光源辐射强弱程度的客观物理量，而光通量是一个光 学概念，是一个属于把辐射通量与人眼的视觉特性联系起来评价的主观物理量，或者说光通量是按光对人眼所激起的明亮感觉程度所估计的辐射通量</p><h4 id="立体角"><a href="#立体角" class="headerlink" title="立体角"></a>立体角</h4><p>为了理解光线在空间中辐射的过程，我们需要引入立体角的概念</p><p>平面情况下，弧度制角度可以由$\theta&#x3D;\frac{l}{r}$计算得到，仿照二维情况，立体角可以由$\omega&#x3D;\frac{A}{r^2}$定义</p><p>其中A如图所示，是立体角锥体在球面上截出的一块面积</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E7%AB%8B%E4%BD%93%E8%A7%92%E6%A6%82%E5%BF%B51.png" alt="立体角概念1"></p><p>采用微分的思想求A的面积，可由简单推导得到<br>$$<br>dA&#x3D;(r·d\theta)·(rsin(\theta)·d\phi)&#x3D;r^2sin(\theta)d\phi d\theta\<br>d\omega&#x3D;\frac{dA}{r^2}&#x3D;sin(\theta)d\phi d\theta<br>$$<br><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p14-%E5%85%89%E8%BF%BD%EF%BC%8C%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6/%E5%BE%AE%E5%88%86%E7%AB%8B%E4%BD%93%E8%A7%92.png" alt="微分立体角"></p><p>对微分立体角进行全积分，可以得到立体角的范围<br>$$<br>\Omega&#x3D;\int_{S^2}\int_0^\pi sin(\theta)d\phi d\theta&#x3D;4\pi\<br>\omega\in[0,4\pi]<br>$$<br>具体推导过程参考：<a href="https://blog.csdn.net/LoseInVain/article/details/108630648">https://blog.csdn.net/LoseInVain/article/details/108630648</a></p><h4 id="Irradiance（辐照度）"><a href="#Irradiance（辐照度）" class="headerlink" title="Irradiance（辐照度）"></a>Irradiance（辐照度）</h4><p>定义：受照面单位面积上的辐射功率，即在单位时间内，每个单位面积上接受到的光照的能量</p><p>公式：$E&#x3D;\frac{\mathrm{d}P}{\mathrm{d}A}·cos(\theta)&#x3D;\frac{\mathrm{d}Q}{\mathrm{d}A\mathrm{d}t}·cos(\theta)$</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E8%BE%90%E7%85%A7%E5%BA%A6.png" alt="辐照度"></p><p>将辐射度量学里的功率换成光学里的流明，公式同样成立，光学中辐照度对应物理量为lux（勒克斯）</p><p>同样类似Blinn-Phone模型，这里也需要考虑光线和受照面的角度问题</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%B0%E4%BC%AF%E7%89%B9%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86.png" alt="兰伯特余弦定理"></p><p>如上三图，兰伯特余弦定理</p><p>左图光线垂直受照面，直接代公式；中图夹角60°，六根光线只照到三根，乘cos60°结果正确</p><p>更普遍的情况如右图，要乘以光线和受照面法线的夹角，写进代码就是 $l·n$</p><p>兰伯特余弦定理也可以解释地球的四季变换，北半球夏天太阳直射北半球，北半球的Irradiance当然更多，也就更热；而当北半球是冬天的时候，光线与北半球地球表面的夹角变大，cos值变小，Irradiance减少，冬天也就更冷</p><p>而在讲Blinn-Phone漫反射模型的时候，我们曾提到过，光照的辐射能量可以假设集中在一个球壳上，同一球面上光能处处相等，而随着球壳半径的增长，单位面积上的光能也呈$r^2$衰减</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E8%BE%90%E7%85%A7%E5%BA%A6%E8%A1%B0%E5%87%8F.png" alt="辐照度衰减"></p><p>如图，在最里面的单位球上$E&#x3D;\frac{P}{4\pi}$，而在外层球壳上，$E’&#x3D;\frac{P}{4\pi r^2}&#x3D;\frac{E}{r^2}$</p><p>在学了辐照度概念之后，我们就可以知道这里光能衰减的并不是Radiant Intensity，而是Irradiance</p><p>对于Radiant Intensity，随r的增长，它的值保持不变</p><h4 id="Radiance（辐亮度）"><a href="#Radiance（辐亮度）" class="headerlink" title="Radiance（辐亮度）"></a>Radiance（辐亮度）</h4><p>定义：单位投影面积、单位立体角上的辐射功率，是描述环境中光的分布的基本场量</p><p>公式：<br>$$<br>L&#x3D;\frac{\mathrm{d}^2P}{\mathrm{d}Ad\omega cos(\theta)}<br>$$<br>注意这里的2是二次微分标记，即$dA,d\omega$各做一次微分，不是平方标记！</p><p>准确的光线追踪与radiance的关系非常大，其渲染就是在计算radiance</p><p>同样的，对于光学来说，辐亮度也有他自己的另一个单位，nit（尼特）<br>$$<br>[\frac{w}{m^2sr}][\frac{cd}{m^2}&#x3D;\frac{lm}{m^2sr}&#x3D;nit]<br>$$</p><h4 id="Radiance-Irradiance-Intensity之间的联系与区别"><a href="#Radiance-Irradiance-Intensity之间的联系与区别" class="headerlink" title="Radiance &amp; Irradiance &amp; Intensity之间的联系与区别"></a>Radiance &amp; Irradiance &amp; Intensity之间的联系与区别</h4><p>从公式看起<br>$$<br>L&#x3D;\frac{\mathrm{d}^2P}{\mathrm{d}Ad\omega cos(\theta)};\ \ \<br>I&#x3D;\frac{\mathrm{d}P}{\mathrm{d}\omega};\ \ \<br>E&#x3D;\frac{\mathrm{d}P}{\mathrm{d}A}\<br>L&#x3D;\frac{\mathrm{d}E}{\mathrm{d}\omega cos(\theta)}^①<br> &#x3D;\frac{\mathrm{d}I}{\mathrm{d}A cos(\theta)}^②<br>$$<br>从放射（放出能量）的角度来解释，Radiance表示单位面积上 因吸收了能量 而朝某个方向&#x3D;&#x3D;辐射出去多少能量&#x3D;&#x3D;</p><p>从入射（吸收能量）的角度来解释，Radiance表示单位面积上 所有接收到的能量中的某一束，即&#x3D;&#x3D;Irradiance在某一方向上的分量&#x3D;&#x3D;</p><p>而对于Intensity，辐射强度代表的是所有在某一单位立体角方向上辐射出的能量</p><p>Radiance代表这个Intensity在某个单位面积dA上的投影 &#x2F; 分量</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E8%BE%90%E7%85%A7%E5%BA%A6&%E8%BE%90%E4%BA%AE%E5%BA%A6.png" alt="辐照度&amp;辐亮度"></p><p>Radiance和Irradiance的区别和联系在图形学中非常重要，总结来说就是：</p><p>Radiance是某个单位面积向某个单位立体角辐射出去的能量，Irradiance是某个单位面积上接受到来自四面八方的能量</p><p>区别就在于辐亮度Radiance有方向的概念，而辐照度Irradiance没有</p><p>把半球面上的所有Radiance积分起来得到的就是Irradiance</p><h3 id="双向反射分布函数（BRDF）"><a href="#双向反射分布函数（BRDF）" class="headerlink" title="双向反射分布函数（BRDF）"></a>双向反射分布函数（BRDF）</h3><p>BRDF：Bidirectional Reflectance Distribution Function  双向反射分布函数</p><p>BSDF：Bidirectional Scattering Distribution Function  双向散射分布函数</p><p>BTDF：Bidirectional Transmittance Distribution Function  双向透射分布函数</p><p>BSSRDF：Bidirectional Scattering-Surface Reflectance Distribution Function  双向散射表面反射（次表面散射）分布函数</p><p>以上为PBR知识体系下渲染方程所涉及的BxDF</p><p>回归正题，我们之前所说的反射情况，当发生镜面反射时，光线会朝一个方向反射，当发生漫反射时，光线会向四面八方反射</p><p>在我们之前的理解中，反射就是光线到达物体表面后偏移到另一个方向，而在学了辐射度量学之后，我们可以换一个角度思考这个过程</p><p>假设光线到达物体表面后，被物体表面吸收，而后再由物体表面发射到其他方向去，也就是用Radiance和Irradiance来解释反射</p><p><strong>吸收过程</strong>：$\mathrm{d}E(\omega_{input})&#x3D;L(\omega_{input})cos(\theta_{input})\mathrm{d}\omega_{input}$        参照①号公式</p><p>表示单位面积由$\omega_{input}$方向上的光线吸收得到的Irradiance</p><p><strong>辐射过程</strong>：$\mathrm{d}L(\omega_{output})\ \ \ (due\ \ to\ \ \mathrm{d}E(\omega_{input}))$</p><p>表示单位面积在经过吸收过程后向$\omega_{output}$方向上反射出去的Radiance</p><p>由上可知，我们很容易求得单位面积从某一方向吸收了多少能量，而很难求出吸收之后辐射出去的Radiance分布情况</p><p>于是我们就定义一种函数来描述这种Radiance的分布：<br>$$<br>\mathrm{d}L(\omega_{output})&#x3D;<br>f_r(\omega_{input}\rightarrow\omega_{output})·\mathrm{d}E(\omega_{input})\<br>f_r(\omega_{input}\rightarrow\omega_{output})&#x3D;<br>\frac{\mathrm{d}L(\omega_{output})}{\mathrm{d}E(\omega_{input})}<br>&#x3D;\frac{\mathrm{d}L(\omega_{output})}{L(\omega_{input})cos(\theta_{input})\mathrm{d}\omega_{input}}<br>$$<br>这个函数就是BRDF双向反射分布函数，其实它就是定义了一个比例（该比例由材质决定）<br>$$<br>f_r(\omega_{input}\rightarrow\omega_{output})&#x3D;\frac{吸收后向某立体角方向辐射出去的 Radiance}{辐射前某单位面积\mathrm{d}A接收到的Irradiance}<br>$$<br>表示的是一个吸收与辐射的转化比例，即某个光线打到物体表面后，往不同方向反射的能量分布</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/BRDF.png" alt="BRDF"></p><p>现在再来考虑镜面反射和漫反射，我们会发现镜面反射辐射出去的能量全都集中在反射方向上，而漫反射则是将吸收的能量均匀分配到了各个方向</p><p>如果忽略公式本身的推导过程，其实BRDF描述的就是物体和光线之间的相互作用</p><h3 id="渲染方程"><a href="#渲染方程" class="headerlink" title="渲染方程"></a>渲染方程</h3><h4 id="反射方程"><a href="#反射方程" class="headerlink" title="反射方程"></a>反射方程</h4><p>上述分析中，$dL(\omega_{output})$是某单位面积在$\omega_{input}$方向上吸收了$dE(\omega_{input})$后向$\omega_{output}$辐射的能量</p><p>而这仅仅是$\omega_{input}$方向上吸收得到的$dL(\omega_{output})$，我们的研究需要的是这个单位面积从各个方向上吸收了能量而在$\omega_{output}$上总共辐射的能量</p><p>因此我们需要对整个半球面求积分，来累加$dL(\omega_{output})$<br>$$<br>L(p,\omega_{exit})&#x3D;\int_{H^2}f_r(p,\omega_{input}\rightarrow\omega_{exit})·dE(p,\omega_{input})<br>&#x3D;\int_{H^2}f_r(p,\omega_{input}\rightarrow\omega_{exit})·<br>L(p,\omega_{input})cos(\theta_{input})d\omega_{input}<br>$$<br>方程的（）中多出来的p表示入射（反射）点</p><p>另外，在考虑反射方程的时候，我们还要注意：</p><p>反射点接受的能量（Irradiance）并不只是来自于光源，还会来自别的表面反射来的光（Irradiance）</p><p>从反射点反射出去的能量（Radiance）也并不只会反射到Camera或者人眼，还会作为Irradiance反射到其他的面上</p><p>所以理论上的反射方程定义应该带有递归的思想，也因此，光线反射的次数不同，得到的最终效果也就不会不同</p><p>但是我们目前先不考虑这些，暂且先用上面这个反射方程当做通用的方程</p><h4 id="渲染方程-1"><a href="#渲染方程-1" class="headerlink" title="渲染方程"></a>渲染方程</h4><p>渲染方程与反射方程相比只是多加了一个自发光的项</p><p>渲染效果 &#x3D; 反射光 + 自发光，方程如下：<br>$$<br>L(p,\omega_{output})&#x3D;L_{emission}+\int_{\Omega+}L(p,\omega_{input})·<br>f_r(p,\omega_{input}\rightarrow\omega_{output})·(n·\omega_{input})d\omega_{input}<br>$$<br>注意其中$\omega^+$和$H^2$是等价的，都是表示半球面 积分区域，并且在渲染方程中，假设入射出射所有的向量都是由内指向外的</p><h4 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h4><p>如果只有一个点光源，那么反射光&#x3D;自发光+入射光×BRDF×入射光与法线的夹角</p><p>如果有很多个点光源，那么反射光就是把所有点光源的反射光能量加起来<br>$$<br>L(p,\omega_{output})&#x3D;L_{emission}+\sum L(p,\omega_{input})·<br>f_r(p,\omega_{input}\rightarrow\omega_{output})·(n·\omega_{input})<br>$$<br>如果存在面光源，那么将这个面光源当成点光源的集合，求积分<br>$$<br>L(p,\omega_{output})&#x3D;L_{emission}+\int_{\Omega}L(p,\omega_{input})·<br>f_r(p,\omega_{input}\rightarrow\omega_{output})·(n·\omega_{input})d\omega_{input}<br>$$<br>如果不止光源，还有其他物体反射来的光，则把其他物体的反射面当成光源，递归<br>$$<br>L(p,\omega_{output})&#x3D;L_{emission}+\int_{\Omega}L(X’,\omega_{input})·<br>f_r(X’,\omega_{input}\rightarrow\omega_{output})·(n·\omega_{input})d\omega_{input}<br>$$<br><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E6%B8%B2%E6%9F%93%E6%96%B9%E7%A8%8B1.png" alt="渲染方程1"></p><h5 id="全局光照"><a href="#全局光照" class="headerlink" title="全局光照"></a>全局光照</h5><p>为方便后续理解，将整个渲染方程简写<br>$$<br>L(p,\omega_{output})&#x3D;L_{emission}+\int_{\Omega}L(X’,\omega_{input})·<br>f_r(X’,\omega_{input}\rightarrow\omega_{output})·(n·\omega_{input})d\omega_{input}\\downarrow\<br>L(u)&#x3D;e(u)+\int L(v)K(u,v)dv\\downarrow\<br>L&#x3D;E+KL<br>$$<br>e(u)：自发光<br>L(v)：吸收其他物体反射过来的光后辐射出来的Irradiance<br>K(u,v)：BRDF算子<br>u，v表示两个不同的反射位置</p><p>L、E是向量，K是算子&#x2F;矩阵</p><p>化简，求出L</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E6%B8%B2%E6%9F%93%E6%96%B9%E7%A8%8B2.png" alt="渲染方程2"></p><p>利用算子的运算性质（求逆以及泰勒展开）进一步对L进行变换</p><p>最后我们得到的L这种形式可以视作以 光的弹射次数 为区分的很多项，把光线弹射的次数的项累加起来，就得到了全局光照渲染方程</p><p>如果用渲染方程来理解光栅化，可以发现光栅化只做了全局光照的前两步，即自发光和直接光照</p><p>从这里再理解光线追踪一开始说的光栅化的不足，豁然开朗</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E7%94%A8%E6%B8%B2%E6%9F%93%E6%96%B9%E7%A8%8B%E7%90%86%E8%A7%A3%E5%85%89%E6%A0%85%E5%8C%96.png" alt="用渲染方程理解光栅化"></p><p>随着展开次数的增加，渲染效果如下图所示</p><table><thead><tr><th><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A71.png" alt="全局光照1"></th><th><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A72.png" alt="全局光照2"></th></tr></thead><tbody><tr><td><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A73.png" alt="全局光照3"></td><td><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A74.png" alt="全局光照4"></td></tr><tr><td><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A75.png" alt="全局光照5"></td><td><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p15-%E8%BE%90%E5%B0%84%E5%BA%A6%E9%87%8F%E5%AD%A6%EF%BC%8C%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9F%BA%E7%A1%80/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A76.png" alt="全局光照6"></td></tr></tbody></table><p>前几张的对比效果非常明显，注意到两次反射和四次反射中，图片上方的灯由黑色转为透明，这是因为如果只做两次反射，光线只能被允许进入玻璃内，而无法从玻璃中透射出来，而四次反射则可以让光线从中射出，因此反射四次的灯是透明的</p><p>另外，不难发现8次反射和16次反射得到的结果并没有差太多，这也恰恰证明了渲染方程满足泰勒展开级数收敛这一性质</p><h3 id="蒙特卡洛积分"><a href="#蒙特卡洛积分" class="headerlink" title="蒙特卡洛积分"></a>蒙特卡洛积分</h3><p>需要用到的概率论知识点（建议复习）：离散&#x2F;连续型随机变量的分布，连续型随机变量的概率密度函数（PDF），数学期望</p><p>why：正常的定积分（黎曼积分）都要求有解析式才能够进行计算，而大多数情况解析式是求不出来的。蒙特卡洛积分提供了一种求解这些比较难以计算的积分的近似值的思路</p><p>what：在积分区域上随机采样，若采样方式为均匀采样（采样pdf为均匀分布），则认为样本和采样值的乘积 $xf(x)$ 为单次采样的积分结果，随后多次采样取平均，得到最终近似结果：<br>$$<br>F_N&#x3D;\frac{b-a}{N}\sum_{i&#x3D;1}^{N}{f(X_i)}<br>$$<br>可以借助之前黎曼积分的面积微元进行理解，蒙特卡洛积分就是求了一个面积的平均值</p><p>更一般的，若采样方式并非均匀，而是满足一种概率密度函数（pdf），则积分结果如下：<br>$$<br>F_N&#x3D;\frac{1}{N}\sum_{i&#x3D;1}^{N}\frac{f(X_i)}{pdf(X_i)}\ ,\ (X_i\sim pdf(x))<br>$$<br>其中，N为采样次数，$X_i$为随机变量（采样值）</p><p>这里除以$pdf(X_i)$可以理解为一种加权，哪里采样的多哪里就多做平均</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GPUGems3：</span><br><span class="line">...</span><br><span class="line">However, when we skew sample directions, not all estimates of the integral are equal, and thus we must weight them accordingly when averaging all the samples. For instance, one sample in a low-value region of the PDF is representative of what would be many samples if uniform sampling were used. Similarly, one sample in a high-value PDF region represents only a few samples with uniform sampling. To compensate for this property of the PDF-proportional sampling, we multiply each sample by the inverse of the PDF.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E7%A7%AF%E5%88%86%E5%AE%9A%E4%B9%89.png" alt="蒙特卡洛积分定义"></p><h3 id="路径追踪"><a href="#路径追踪" class="headerlink" title="路径追踪"></a>路径追踪</h3><p>Whitted-Style光线追踪的做法是，光线在镜面反射表面弹射，而在漫反射表面停止，这显然是不符合现实的</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/Whitted%EF%BC%9F(1).png" alt="Whitted？(1)"></p><p>其中一个问题，拿经典的Utah teaport为例，whitted光追只能做左图的光照效果，而对于那种有光泽但不全是镜面反射的glossy材质（右图），whitted做出来的效果并不尽如人意</p><p>第二个问题，whitted风格光线追踪不考虑漫反射，虽然递归的思想是正确的，但就像下图（康奈尔盒子）所示，whitted的天花板由于接收不到来自环境光照，呈现一个全黑的状态，并且whitted渲染出的长方体并没有表现红墙和绿墙上反射过来的带有色彩的光，相比之下，路径追踪的结果就真实很多</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/Whitted%EF%BC%9F(2).png" alt="Whitted？(2)"></p><h4 id="求解渲染方程"><a href="#求解渲染方程" class="headerlink" title="求解渲染方程"></a>求解渲染方程</h4><p>对于之前的渲染方程，我们可以用蒙特卡洛积分法进行求解</p><p>忽略自发光项（仅计算直接光照），简单考虑均匀采样的情况，半球立体角范围$[0,2\pi]$，因此$pdf(x)&#x3D;\frac{1}{2\pi}$<br>$$<br>L(p,\omega_{output})&#x3D;\int_{\Omega+}L(p,\omega_{input_i})·<br>f_r(p,\omega_{input_i}\rightarrow\omega_{output})·(n·\omega_{input_i})d\omega_{input_i}\<br>\approx\frac{1}{N}\sum_{i&#x3D;1}^{N}<br>\frac{L(p,\omega_{input_i})·f_r(p,\omega_{input_i}\rightarrow\omega_{output})·(n·\omega_{input_i})}{pdf(\omega_{input_i})}<br>$$<br>用伪代码表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shade(p,w_o)</span><br><span class="line">Randomly choose N directions wi~pdf <span class="comment">//采样N个方向分别打光</span></span><br><span class="line">Lo = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> each wi</span><br><span class="line">&#123;</span><br><span class="line">Trace a ray <span class="title function_">r</span><span class="params">(p,wi)</span>;</span><br><span class="line"><span class="keyword">if</span> a ray hit the light <span class="comment">//若打到光源，则累加</span></span><br><span class="line">Lo += (<span class="number">1</span>/N) * L_i * f_r * cosine / pdf(wi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Lo;</span><br></pre></td></tr></table></figure><p>接着，引入间接光照</p><p>要知道着色点P因Q的反射获得多少能量，其实就相当于摄像机在P点处计算Q的直接光照</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA.png" alt="间接光照路径追踪"></p><p>那么就只需要在上述伪代码中加一条判断，看看这条光线有没有打到其他物体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shade(p,w_o)</span><br><span class="line">Randomly choose N directions wi~pdf <span class="comment">//采样N个方向分别打光</span></span><br><span class="line">Lo = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> each wi</span><br><span class="line">&#123;</span><br><span class="line">Trace a ray <span class="title function_">r</span><span class="params">(p,wi)</span>;</span><br><span class="line"><span class="keyword">if</span> ray r hit the light <span class="comment">//若打到光源，则累加</span></span><br><span class="line">Lo += (<span class="number">1</span>/N) * L_i * f_r * cosine / pdf(wi);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ray r hit an object at q</span><br><span class="line">Lo += (<span class="number">1</span>/N) * shade(q,-wi) * f_r * cosine / pdf(wi); <span class="comment">//若打到物体，则递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Lo;</span><br></pre></td></tr></table></figure><p>至此，基本的求解渲染方程已经有了大概的架构，但代码依然存在一些不可忽视的问题</p><h4 id="完善代码"><a href="#完善代码" class="headerlink" title="完善代码"></a>完善代码</h4><p>递归递归，有递有归，无非就是要考虑&#x3D;&#x3D;问题传递的可行性&#x3D;&#x3D;和&#x3D;&#x3D;有没有归&#x3D;&#x3D;这两方面因素</p><h5 id="问题传递的可行性"><a href="#问题传递的可行性" class="headerlink" title="问题传递的可行性"></a>问题传递的可行性</h5><p>p的着色需要q的环境光照信息，而q的环境光照信息又必须包含其他物体的环境光照信息，如此需要追踪的光线数量会呈指数级增长</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%981.png" alt="路径追踪递归问题1"></p><p>只有当采样数为1的时候，即N&#x3D;1时，才不会受到这种影响，路径追踪也因此得名（N$\neq$1时称为分布式光线追踪）</p><p>虽然但是，这样一来误差就会特别大，渲染结果势必会有非常多的噪点，为了解决这个问题，我们对单个像素计算多次路径追踪结果，随后求平均，这个过程其实也用到了蒙特卡洛方法</p><p>修改伪代码，得到路径追踪渲染方程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">shade(p,w_o)</span><br><span class="line">&#123;</span><br><span class="line">Randomly choose One directions wi~pdf <span class="comment">//采样1个方向打光</span></span><br><span class="line">Trace a ray <span class="title function_">r</span><span class="params">(p,wi)</span>;</span><br><span class="line"><span class="keyword">if</span> ray r hit the light <span class="comment">//若打到光源，则累加</span></span><br><span class="line"><span class="keyword">return</span> L_i * f_r * cosine / pdf(wi);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ray r hit an object at q</span><br><span class="line"><span class="keyword">return</span> shade(q,-wi) * f_r * cosine / pdf(wi); <span class="comment">//若打到物体，则递归</span></span><br><span class="line"><span class="keyword">return</span> Lo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ray_generation(cam_pos,pixel)</span><br><span class="line">&#123;</span><br><span class="line">Uniformly choose N sample positions within the pixel; <span class="comment">//对一个像素采样N个路径</span></span><br><span class="line"><span class="comment">//对每条路径计算着色后进行累加，注意该处pdf和shade函数中的pdf并不相同，这里是对像素采样的pdf</span></span><br><span class="line">    <span class="keyword">for</span> each sample in the pixel</span><br><span class="line">&#123;</span><br><span class="line">shoot a ray <span class="title function_">r</span><span class="params">(cam_pos,cam2sample)</span>;</span><br><span class="line"><span class="keyword">if</span> ray r hit the scene at p</span><br><span class="line">pixel_radiance += <span class="number">1</span>/N * shade(p,sample2cam)/pdf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pixel_radiance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归结束条件"><a href="#递归结束条件" class="headerlink" title="递归结束条件"></a>递归结束条件</h5><p>很容易看出，上述算法的递归没有终止条件，放到现实中这也是非常合理的，因为现实中的光并不会弹射一定次数后终止弹射，而会一直弹射下去，在算法中强行设置终止次数结束递归不满足现实情况的能量守恒定律，会有一定亮度差异（弹射3次和弹射17次的亮度差异是非常明显的），为了解决这一问题，我们需要用到与俄罗斯轮盘赌类似的思想</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E4%BF%84%E7%BD%97%E6%96%AF%E8%BD%AE%E7%9B%98%E8%B5%8C.png" alt="俄罗斯轮盘赌"></p><p>这个思想其实就是一个伯努利分布（均匀分布）概念，让光线在每个弹射点都有一定概率继续弹射，设这个概率为p，那么光线停止弹射的概率为（1-p），为了得到相同的路径追踪结果，意味着这个伯努利实验的期望值必须保持Lo不变，那么我们可以巧妙的认为p概率继续弹射得到的能量是$\frac{Lo}{p}$（终止弹射的结果很自然就是0）<br>$$<br>E&#x3D;P·\frac{Lo}{P}+(1-p)·0&#x3D;Lo<br>$$<br>总结到伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shade(p,w_o)</span><br><span class="line">&#123;</span><br><span class="line">Manually specify a probability P_RR；</span><br><span class="line">Randomly select ksi in a uniform dist. in [<span class="number">0</span>,<span class="number">1</span>]； <span class="comment">//取0-1的一个随机数</span></span><br><span class="line"><span class="keyword">if</span> (ksi &gt; P_RR)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">Randomly choose One directions wi~pdf <span class="comment">//采样1个方向打光</span></span><br><span class="line">Trace a ray <span class="title function_">r</span><span class="params">(p,wi)</span>;</span><br><span class="line"><span class="keyword">if</span> ray r hit the light</span><br><span class="line"><span class="keyword">return</span> L_i * f_r * cosine / pdf(wi) / P_RR;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ray r hit an object at q</span><br><span class="line"><span class="keyword">return</span> shade(q,-wi) * f_r * cosine / pdf(wi) / P_RR;</span><br><span class="line"><span class="keyword">return</span> Lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们就有了一个合理的递归终止条件</p><p><em>思考：闫老师上课提了一个问题，对于分布式光线追踪，这个期望值是多少</em></p><p><em>答：$E&#x3D;\frac{p}{(1-p)^2}$，证明如下</em><br>$$<br>\sum_{n&#x3D;1}^\infty np^n&#x3D;p+2p^2+3p^3+···+np^n ①\<br>p\sum_{n&#x3D;1}^\infty np^n&#x3D;p^2+2p^3+···+(n-1)p^n+np^{n+1} ②\<br>①-②:(1-p)\sum_{n&#x3D;1}^\infty np^n&#x3D;p+p^2+p^3+···+p^n-np^{n+1}&#x3D;\sum_{n&#x3D;1}^\infty p^n&#x3D;\frac{p}{1-p}\<br>E&#x3D;\sum_{n&#x3D;1}^\infty np^n&#x3D;\frac{p}{(1-p)^2}<br>$$</p><h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><p>至此，我们的路径追踪算法已经做到完全正确，但又出现了一个矛盾点，即像素的采样率</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E5%83%8F%E7%B4%A0%E9%87%87%E6%A0%B7%E7%8E%87%E5%B7%AE%E5%BC%82.png" alt="像素采样率差异"></p><p>上左图为采样率较低的情况，渲染速度快，效果差，右图采样率较高，效果好，但渲染速度慢</p><p>引发这个矛盾的原因是光源大小的不确定性，我们的算法在计算间接光照的时候，可能在采样路径半当中还没弹射到光源就被俄罗斯轮盘终止掉了，相当于这次计算算了个寂寞。面对大的光源，这种情况会很少，而一旦碰上了小光源，这种浪费现象会频繁发生，这是我们不希望看到的，所以我们就想能不能不用这种基于着色点采样的方式，而改为一种基于光源的pdf</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E5%9D%87%E5%8C%80%E9%87%87%E6%A0%B7%E7%9A%84%E7%BC%BA%E7%82%B9.png" alt="路径追踪均匀采样的缺点"></p><p>先不考虑光源和着色点之间有物体阻挡这种情况，把光源视为一个矩形表面，直接在光源上采样，就不会发生这种浪费</p><p>设着色点法线为n，光源平面的法线n’，如图</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E5%AF%B9%E5%85%89%E6%BA%90%E8%BF%9B%E8%A1%8C%E9%87%87%E6%A0%B7.png" alt="对光源进行采样"></p><p>设光源平面面积为A，采样面积dA，则对光源均匀采样的pdf为$\frac{1}{A}$（原因见上图ppt），问题是，之前提渲染方程的时候，都是采样到哪个点就计算哪个点的立体角的积分，这里在光源上采样，却还用着着色点的立体角微分，这显然是不对的</p><p>因此，我们需要对积分域做一个变换，即找到$d\omega$和$dA$的关系</p><p>先算$dA·cos\theta’$求出$dA$在$d\omega$上的投影，再通过立体角定义，求得<br>$$<br>d\omega&#x3D;\frac{dAcos\theta’}{|x’-x|^2}<br>$$<br>重写渲染方程<br>$$<br>L(p,\omega_{output})&#x3D;\int_{\Omega+}L(p,\omega_{input_i})·<br>f_r(p,\omega_{input_i}\rightarrow\omega_{output})·cos\theta \ d\omega_{input_i}\<br>&#x3D;\int_{\Omega+}L(p,\omega_{input_i})·<br>f_r(p,\omega_{input_i}\rightarrow\omega_{output})·\frac{cos\theta ·cos\theta’}{|x’-x|^2} \ dA<br>$$</p><p>之前对着色点采样，是一条路径上每弹射一次就判断一次是否继续递归，对于光源采样，思路要进行微调，即分为两部分计算，一部分是光源直接对着色点的影响，另一部分是光源的间接影响</p><p>翻译到伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">shade(p,wo)</span><br><span class="line">&#123;at x<span class="number">&#x27;</span>;<span class="comment">//pdf_light = 1/A</span></span><br><span class="line">    L_dir = L_i * f_r * <span class="built_in">cos</span>θ * <span class="built_in">cos</span>θ<span class="string">&#x27; / |x&#x27;</span>-p|^<span class="number">2</span> / pdf_light;</span><br><span class="line"></span><br><span class="line"># Contribution from other reflectors</span><br><span class="line">L_indir = <span class="number">0.0</span>;</span><br><span class="line">Test Russian Roulette with probability P_RR;</span><br><span class="line">    Uniformly sample the hemisphere toward wi;<span class="comment">//pdf_hemi = 1 / 2pi</span></span><br><span class="line">    Trace a ray <span class="title function_">r</span><span class="params">(p,wi)</span>;</span><br><span class="line">    <span class="keyword">if</span> ray r hit a non-emitting object at q</span><br><span class="line">        L_indir = shade(q,-wi) * f_r * <span class="built_in">cos</span>θ / pdf_hemi / P_RR;</span><br><span class="line">    <span class="keyword">return</span> L_dir + L_indir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还没完，回到没考虑的光源和着色点之间有物体阻挡的情况，需要额外再加一个判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shade(p,wo)</span><br><span class="line">&#123;</span><br><span class="line"># Contribution from the light source.</span><br><span class="line">    Uniformly sample the light at x<span class="number">&#x27;</span>;<span class="comment">//pdf_light = 1/A</span></span><br><span class="line">    Shoot a ray from p to x<span class="number">&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> the ray is not blocked in the middle</span><br><span class="line">    L_dir = ...</span><br><span class="line">    ...</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>总结一下路径追踪的整体思路：由像素采样打出追踪路径确定需要计算的着色点，再光源采样计算每个着色点的着色信息，返回给像素</p><p>看下结果</p><p><img src="/posts/8491/-STUDY-/college/%E9%97%AB%E4%BB%A4%E7%90%AA_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8/101/%E5%9B%BE%E7%89%87/p16-%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA/%E8%B7%AF%E5%BE%84%E8%BF%BD%E8%B8%AA%E7%BB%93%E6%9E%9C%E5%87%A0%E4%B9%8E100%25%E6%AD%A3%E7%A1%AE.png" alt="路径追踪结果几乎100%正确"></p><p>可以看到，路径追踪几乎可以做到100%正确</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>现代的光线追踪已经不再仅仅是指Whitted风格光线追踪了，Ray-Tracing可以被理解为一切模拟光线传播的方法的集合，如双向路径追踪，光子映射等等等等。计图是一个很深的坑，一门入门课肯定有很多东西覆盖不到，就拿路径追踪来说——</p><p>蒙特卡洛积分应该用什么pdf？（重要性采样）</p><p>计算机自带的随机数真的正确么？（随机数质量）</p><p>对着色点采样和对光源采样二者能否结合？（多重重要性采样 IMS）</p><p>对像素的采样需要如何加权？</p><p>最后得到的结果是radiance，如何转化为像素颜色？（伽马矫正）</p><p>……</p><p>路径追踪仍然是入门级别的内容……敬畏科学吧</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
